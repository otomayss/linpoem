{"version":3,"file":"js/218-legacy.c11f1beb.js","mappings":"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","sources":["webpack://lin-cms-vvlog/./src/view/aichat/aichat-dialog.vue?e6de","webpack://lin-cms-vvlog/./node_modules/.pnpm/marked@15.0.4/node_modules/marked/lib/marked.esm.js","webpack://lin-cms-vvlog/./src/view/aichat/aichat-dialog.vue","webpack://lin-cms-vvlog/./src/view/aichat/aichat-dialog.vue?e81c","webpack://lin-cms-vvlog/./node_modules/.pnpm/@babel+runtime@7.20.13/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js"],"sourcesContent":["import \"core-js/modules/es.string.trim.js\";\nimport { createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, normalizeClass as _normalizeClass, createTextVNode as _createTextVNode, createCommentVNode as _createCommentVNode, vModelText as _vModelText, withKeys as _withKeys, withDirectives as _withDirectives, resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nvar _withScopeId = function _withScopeId(n) {\n  return _pushScopeId(\"data-v-9eb633d4\"), n = n(), _popScopeId(), n;\n};\nvar _hoisted_1 = {\n  class: \"chat-dialog\"\n};\nvar _hoisted_2 = /*#__PURE__*/_withScopeId(function () {\n  return /*#__PURE__*/_createElementVNode(\"div\", {\n    class: \"chat-header\"\n  }, [/*#__PURE__*/_createElementVNode(\"div\", {\n    class: \"header-title\"\n  }, [/*#__PURE__*/_createElementVNode(\"i\", {\n    class: \"el-icon-chat-dot-round\"\n  }), /*#__PURE__*/_createElementVNode(\"span\", null, \"遥遥领先的测算大模型！\")])], -1);\n});\nvar _hoisted_3 = {\n  class: \"chat-body\",\n  ref: \"chatBody\"\n};\nvar _hoisted_4 = {\n  class: \"message-list\"\n};\nvar _hoisted_5 = {\n  class: \"message-avatar\"\n};\nvar _hoisted_6 = {\n  class: \"message-wrapper\"\n};\nvar _hoisted_7 = [\"innerHTML\"];\nvar _hoisted_8 = {\n  key: 0,\n  class: \"loading-indicator\"\n};\nvar _hoisted_9 = /*#__PURE__*/_withScopeId(function () {\n  return /*#__PURE__*/_createElementVNode(\"i\", {\n    class: \"el-icon-loading\"\n  }, null, -1);\n});\nvar _hoisted_10 = {\n  class: \"chat-footer\"\n};\nvar _hoisted_11 = {\n  class: \"input-wrapper\"\n};\nvar _hoisted_12 = [\"disabled\"];\nvar _hoisted_13 = /*#__PURE__*/_withScopeId(function () {\n  return /*#__PURE__*/_createElementVNode(\"i\", {\n    class: \"el-icon-s-promotion\"\n  }, null, -1);\n});\nvar _hoisted_14 = [_hoisted_13];\nvar _hoisted_15 = /*#__PURE__*/_withScopeId(function () {\n  return /*#__PURE__*/_createElementVNode(\"i\", {\n    class: \"el-icon-document\"\n  }, null, -1);\n});\nvar _hoisted_16 = [_hoisted_15];\nvar _hoisted_17 = {\n  class: \"dialog-footer\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_el_input = _resolveComponent(\"el-input\");\n  var _component_el_button = _resolveComponent(\"el-button\");\n  var _component_el_dialog = _resolveComponent(\"el-dialog\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_hoisted_2, _createElementVNode(\"div\", _hoisted_3, [_createElementVNode(\"ul\", _hoisted_4, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.messages, function (message, index) {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: index,\n      class: _normalizeClass(['message-item', message.role === 'user' ? 'user-message' : 'system-message'])\n    }, [_createElementVNode(\"div\", _hoisted_5, [_createElementVNode(\"i\", {\n      class: _normalizeClass(message.role === 'user' ? 'el-icon-user' : 'el-icon-chat-dot-round')\n    }, null, 2)]), _createElementVNode(\"div\", _hoisted_6, [_createElementVNode(\"div\", {\n      class: \"message-content\",\n      innerHTML: $options.parseMarkdown(message.content)\n    }, null, 8, _hoisted_7)])], 2);\n  }), 128))]), $data.isLoading ? (_openBlock(), _createElementBlock(\"div\", _hoisted_8, [_createTextVNode(\" 邻诗正在深度思考中....\"), _hoisted_9])) : _createCommentVNode(\"\", true)], 512), _createElementVNode(\"div\", _hoisted_10, [_createElementVNode(\"div\", _hoisted_11, [_withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = function ($event) {\n      return $data.inputMessage = $event;\n    }),\n    placeholder: \"输入您的问题...\",\n    onKeyup: _cache[1] || (_cache[1] = _withKeys(function () {\n      return $options.sendMessage && $options.sendMessage.apply($options, arguments);\n    }, [\"enter\"])),\n    ref: \"inputField\"\n  }, null, 544), [[_vModelText, $data.inputMessage]]), _createElementVNode(\"button\", {\n    class: \"send-button\",\n    onClick: _cache[2] || (_cache[2] = function () {\n      return $options.sendMessage && $options.sendMessage.apply($options, arguments);\n    }),\n    disabled: !$data.inputMessage.trim()\n  }, _hoisted_14, 8, _hoisted_12), $options.loggedIn && $data.ai_chat_count === -1 ? (_openBlock(), _createElementBlock(\"button\", {\n    key: 0,\n    class: \"publish-button\",\n    onClick: _cache[3] || (_cache[3] = function () {\n      return $options.showPublishDialog && $options.showPublishDialog.apply($options, arguments);\n    })\n  }, _hoisted_16)) : _createCommentVNode(\"\", true)])]), _createVNode(_component_el_dialog, {\n    title: \"发布对话\",\n    modelValue: $data.publishDialogVisible,\n    \"onUpdate:modelValue\": _cache[6] || (_cache[6] = function ($event) {\n      return $data.publishDialogVisible = $event;\n    }),\n    width: \"30%\"\n  }, {\n    footer: _withCtx(function () {\n      return [_createElementVNode(\"span\", _hoisted_17, [_createVNode(_component_el_button, {\n        onClick: _cache[5] || (_cache[5] = function ($event) {\n          return $data.publishDialogVisible = false;\n        })\n      }, {\n        default: _withCtx(function () {\n          return [_createTextVNode(\"取消\")];\n        }),\n        _: 1\n      }), _createVNode(_component_el_button, {\n        type: \"primary\",\n        onClick: $options.publishChat\n      }, {\n        default: _withCtx(function () {\n          return [_createTextVNode(\"确认\")];\n        }),\n        _: 1\n      }, 8, [\"onClick\"])])];\n    }),\n    default: _withCtx(function () {\n      return [_createVNode(_component_el_input, {\n        modelValue: $data.dialogTitle,\n        \"onUpdate:modelValue\": _cache[4] || (_cache[4] = function ($event) {\n          return $data.dialogTitle = $event;\n        }),\n        placeholder: \"请输入标题\"\n      }, null, 8, [\"modelValue\"])];\n    }),\n    _: 1\n  }, 8, [\"modelValue\"])]);\n}","/**\n * marked v15.0.4 - a markdown parser\n * Copyright (c) 2011-2024, Christopher Jeffrey. (MIT Licensed)\n * https://github.com/markedjs/marked\n */\n\n/**\n * DO NOT EDIT THIS FILE\n * The code in this file is generated from files in ./src/\n */\n\n/**\n * Gets the original marked default options.\n */\nfunction _getDefaults() {\n    return {\n        async: false,\n        breaks: false,\n        extensions: null,\n        gfm: true,\n        hooks: null,\n        pedantic: false,\n        renderer: null,\n        silent: false,\n        tokenizer: null,\n        walkTokens: null,\n    };\n}\nlet _defaults = _getDefaults();\nfunction changeDefaults(newDefaults) {\n    _defaults = newDefaults;\n}\n\nconst noopTest = { exec: () => null };\nfunction edit(regex, opt = '') {\n    let source = typeof regex === 'string' ? regex : regex.source;\n    const obj = {\n        replace: (name, val) => {\n            let valSource = typeof val === 'string' ? val : val.source;\n            valSource = valSource.replace(other.caret, '$1');\n            source = source.replace(name, valSource);\n            return obj;\n        },\n        getRegex: () => {\n            return new RegExp(source, opt);\n        },\n    };\n    return obj;\n}\nconst other = {\n    codeRemoveIndent: /^(?: {1,4}| {0,3}\\t)/gm,\n    outputLinkReplace: /\\\\([\\[\\]])/g,\n    indentCodeCompensation: /^(\\s+)(?:```)/,\n    beginningSpace: /^\\s+/,\n    endingHash: /#$/,\n    startingSpaceChar: /^ /,\n    endingSpaceChar: / $/,\n    nonSpaceChar: /[^ ]/,\n    newLineCharGlobal: /\\n/g,\n    tabCharGlobal: /\\t/g,\n    multipleSpaceGlobal: /\\s+/g,\n    blankLine: /^[ \\t]*$/,\n    doubleBlankLine: /\\n[ \\t]*\\n[ \\t]*$/,\n    blockquoteStart: /^ {0,3}>/,\n    blockquoteSetextReplace: /\\n {0,3}((?:=+|-+) *)(?=\\n|$)/g,\n    blockquoteSetextReplace2: /^ {0,3}>[ \\t]?/gm,\n    listReplaceTabs: /^\\t+/,\n    listReplaceNesting: /^ {1,4}(?=( {4})*[^ ])/g,\n    listIsTask: /^\\[[ xX]\\] /,\n    listReplaceTask: /^\\[[ xX]\\] +/,\n    anyLine: /\\n.*\\n/,\n    hrefBrackets: /^<(.*)>$/,\n    tableDelimiter: /[:|]/,\n    tableAlignChars: /^\\||\\| *$/g,\n    tableRowBlankLine: /\\n[ \\t]*$/,\n    tableAlignRight: /^ *-+: *$/,\n    tableAlignCenter: /^ *:-+: *$/,\n    tableAlignLeft: /^ *:-+ *$/,\n    startATag: /^<a /i,\n    endATag: /^<\\/a>/i,\n    startPreScriptTag: /^<(pre|code|kbd|script)(\\s|>)/i,\n    endPreScriptTag: /^<\\/(pre|code|kbd|script)(\\s|>)/i,\n    startAngleBracket: /^</,\n    endAngleBracket: />$/,\n    pedanticHrefTitle: /^([^'\"]*[^\\s])\\s+(['\"])(.*)\\2/,\n    unicodeAlphaNumeric: /[\\p{L}\\p{N}]/u,\n    escapeTest: /[&<>\"']/,\n    escapeReplace: /[&<>\"']/g,\n    escapeTestNoEncode: /[<>\"']|&(?!(#\\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\\w+);)/,\n    escapeReplaceNoEncode: /[<>\"']|&(?!(#\\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\\w+);)/g,\n    unescapeTest: /&(#(?:\\d+)|(?:#x[0-9A-Fa-f]+)|(?:\\w+));?/ig,\n    caret: /(^|[^\\[])\\^/g,\n    percentDecode: /%25/g,\n    findPipe: /\\|/g,\n    splitPipe: / \\|/,\n    slashPipe: /\\\\\\|/g,\n    carriageReturn: /\\r\\n|\\r/g,\n    spaceLine: /^ +$/gm,\n    notSpaceStart: /^\\S*/,\n    endingNewline: /\\n$/,\n    listItemRegex: (bull) => new RegExp(`^( {0,3}${bull})((?:[\\t ][^\\\\n]*)?(?:\\\\n|$))`),\n    nextBulletRegex: (indent) => new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:[*+-]|\\\\d{1,9}[.)])((?:[ \\t][^\\\\n]*)?(?:\\\\n|$))`),\n    hrRegex: (indent) => new RegExp(`^ {0,${Math.min(3, indent - 1)}}((?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$)`),\n    fencesBeginRegex: (indent) => new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:\\`\\`\\`|~~~)`),\n    headingBeginRegex: (indent) => new RegExp(`^ {0,${Math.min(3, indent - 1)}}#`),\n    htmlBeginRegex: (indent) => new RegExp(`^ {0,${Math.min(3, indent - 1)}}<(?:[a-z].*>|!--)`, 'i'),\n};\n/**\n * Block-Level Grammar\n */\nconst newline = /^(?:[ \\t]*(?:\\n|$))+/;\nconst blockCode = /^((?: {4}| {0,3}\\t)[^\\n]+(?:\\n(?:[ \\t]*(?:\\n|$))*)?)+/;\nconst fences = /^ {0,3}(`{3,}(?=[^`\\n]*(?:\\n|$))|~{3,})([^\\n]*)(?:\\n|$)(?:|([\\s\\S]*?)(?:\\n|$))(?: {0,3}\\1[~`]* *(?=\\n|$)|$)/;\nconst hr = /^ {0,3}((?:-[\\t ]*){3,}|(?:_[ \\t]*){3,}|(?:\\*[ \\t]*){3,})(?:\\n+|$)/;\nconst heading = /^ {0,3}(#{1,6})(?=\\s|$)(.*)(?:\\n+|$)/;\nconst bullet = /(?:[*+-]|\\d{1,9}[.)])/;\nconst lheading = edit(/^(?!bull |blockCode|fences|blockquote|heading|html)((?:.|\\n(?!\\s*?\\n|bull |blockCode|fences|blockquote|heading|html))+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/)\n    .replace(/bull/g, bullet) // lists can interrupt\n    .replace(/blockCode/g, /(?: {4}| {0,3}\\t)/) // indented code blocks can interrupt\n    .replace(/fences/g, / {0,3}(?:`{3,}|~{3,})/) // fenced code blocks can interrupt\n    .replace(/blockquote/g, / {0,3}>/) // blockquote can interrupt\n    .replace(/heading/g, / {0,3}#{1,6}/) // ATX heading can interrupt\n    .replace(/html/g, / {0,3}<[^\\n>]+>\\n/) // block html can interrupt\n    .getRegex();\nconst _paragraph = /^([^\\n]+(?:\\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\\n)[^\\n]+)*)/;\nconst blockText = /^[^\\n]+/;\nconst _blockLabel = /(?!\\s*\\])(?:\\\\.|[^\\[\\]\\\\])+/;\nconst def = edit(/^ {0,3}\\[(label)\\]: *(?:\\n[ \\t]*)?([^<\\s][^\\s]*|<.*?>)(?:(?: +(?:\\n[ \\t]*)?| *\\n[ \\t]*)(title))? *(?:\\n+|$)/)\n    .replace('label', _blockLabel)\n    .replace('title', /(?:\"(?:\\\\\"?|[^\"\\\\])*\"|'[^'\\n]*(?:\\n[^'\\n]+)*\\n?'|\\([^()]*\\))/)\n    .getRegex();\nconst list = edit(/^( {0,3}bull)([ \\t][^\\n]+?)?(?:\\n|$)/)\n    .replace(/bull/g, bullet)\n    .getRegex();\nconst _tag = 'address|article|aside|base|basefont|blockquote|body|caption'\n    + '|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption'\n    + '|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe'\n    + '|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option'\n    + '|p|param|search|section|summary|table|tbody|td|tfoot|th|thead|title'\n    + '|tr|track|ul';\nconst _comment = /<!--(?:-?>|[\\s\\S]*?(?:-->|$))/;\nconst html = edit('^ {0,3}(?:' // optional indentation\n    + '<(script|pre|style|textarea)[\\\\s>][\\\\s\\\\S]*?(?:</\\\\1>[^\\\\n]*\\\\n+|$)' // (1)\n    + '|comment[^\\\\n]*(\\\\n+|$)' // (2)\n    + '|<\\\\?[\\\\s\\\\S]*?(?:\\\\?>\\\\n*|$)' // (3)\n    + '|<![A-Z][\\\\s\\\\S]*?(?:>\\\\n*|$)' // (4)\n    + '|<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?(?:\\\\]\\\\]>\\\\n*|$)' // (5)\n    + '|</?(tag)(?: +|\\\\n|/?>)[\\\\s\\\\S]*?(?:(?:\\\\n[ \\t]*)+\\\\n|$)' // (6)\n    + '|<(?!script|pre|style|textarea)([a-z][\\\\w-]*)(?:attribute)*? */?>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n[ \\t]*)+\\\\n|$)' // (7) open tag\n    + '|</(?!script|pre|style|textarea)[a-z][\\\\w-]*\\\\s*>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n[ \\t]*)+\\\\n|$)' // (7) closing tag\n    + ')', 'i')\n    .replace('comment', _comment)\n    .replace('tag', _tag)\n    .replace('attribute', / +[a-zA-Z:_][\\w.:-]*(?: *= *\"[^\"\\n]*\"| *= *'[^'\\n]*'| *= *[^\\s\"'=<>`]+)?/)\n    .getRegex();\nconst paragraph = edit(_paragraph)\n    .replace('hr', hr)\n    .replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)')\n    .replace('|lheading', '') // setext headings don't interrupt commonmark paragraphs\n    .replace('|table', '')\n    .replace('blockquote', ' {0,3}>')\n    .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n    .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n    .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n    .replace('tag', _tag) // pars can be interrupted by type (6) html blocks\n    .getRegex();\nconst blockquote = edit(/^( {0,3}> ?(paragraph|[^\\n]*)(?:\\n|$))+/)\n    .replace('paragraph', paragraph)\n    .getRegex();\n/**\n * Normal Block Grammar\n */\nconst blockNormal = {\n    blockquote,\n    code: blockCode,\n    def,\n    fences,\n    heading,\n    hr,\n    html,\n    lheading,\n    list,\n    newline,\n    paragraph,\n    table: noopTest,\n    text: blockText,\n};\n/**\n * GFM Block Grammar\n */\nconst gfmTable = edit('^ *([^\\\\n ].*)\\\\n' // Header\n    + ' {0,3}((?:\\\\| *)?:?-+:? *(?:\\\\| *:?-+:? *)*(?:\\\\| *)?)' // Align\n    + '(?:\\\\n((?:(?! *\\\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\\\n|$))*)\\\\n*|$)') // Cells\n    .replace('hr', hr)\n    .replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)')\n    .replace('blockquote', ' {0,3}>')\n    .replace('code', '(?: {4}| {0,3}\\t)[^\\\\n]')\n    .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n    .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n    .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n    .replace('tag', _tag) // tables can be interrupted by type (6) html blocks\n    .getRegex();\nconst blockGfm = {\n    ...blockNormal,\n    table: gfmTable,\n    paragraph: edit(_paragraph)\n        .replace('hr', hr)\n        .replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)')\n        .replace('|lheading', '') // setext headings don't interrupt commonmark paragraphs\n        .replace('table', gfmTable) // interrupt paragraphs with table\n        .replace('blockquote', ' {0,3}>')\n        .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n        .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n        .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n        .replace('tag', _tag) // pars can be interrupted by type (6) html blocks\n        .getRegex(),\n};\n/**\n * Pedantic grammar (original John Gruber's loose markdown specification)\n */\nconst blockPedantic = {\n    ...blockNormal,\n    html: edit('^ *(?:comment *(?:\\\\n|\\\\s*$)'\n        + '|<(tag)[\\\\s\\\\S]+?</\\\\1> *(?:\\\\n{2,}|\\\\s*$)' // closed tag\n        + '|<tag(?:\"[^\"]*\"|\\'[^\\']*\\'|\\\\s[^\\'\"/>\\\\s]*)*?/?> *(?:\\\\n{2,}|\\\\s*$))')\n        .replace('comment', _comment)\n        .replace(/tag/g, '(?!(?:'\n        + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub'\n        + '|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)'\n        + '\\\\b)\\\\w+(?!:|[^\\\\w\\\\s@]*@)\\\\b')\n        .getRegex(),\n    def: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +([\"(][^\\n]+[\")]))? *(?:\\n+|$)/,\n    heading: /^(#{1,6})(.*)(?:\\n+|$)/,\n    fences: noopTest, // fences not supported\n    lheading: /^(.+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\n    paragraph: edit(_paragraph)\n        .replace('hr', hr)\n        .replace('heading', ' *#{1,6} *[^\\n]')\n        .replace('lheading', lheading)\n        .replace('|table', '')\n        .replace('blockquote', ' {0,3}>')\n        .replace('|fences', '')\n        .replace('|list', '')\n        .replace('|html', '')\n        .replace('|tag', '')\n        .getRegex(),\n};\n/**\n * Inline-Level Grammar\n */\nconst escape$1 = /^\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/;\nconst inlineCode = /^(`+)([^`]|[^`][\\s\\S]*?[^`])\\1(?!`)/;\nconst br = /^( {2,}|\\\\)\\n(?!\\s*$)/;\nconst inlineText = /^(`+|[^`])(?:(?= {2,}\\n)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*_]|\\b_|$)|[^ ](?= {2,}\\n)))/;\n// list of unicode punctuation marks, plus any missing characters from CommonMark spec\nconst _punctuation = /[\\p{P}\\p{S}]/u;\nconst _punctuationOrSpace = /[\\s\\p{P}\\p{S}]/u;\nconst _notPunctuationOrSpace = /[^\\s\\p{P}\\p{S}]/u;\nconst punctuation = edit(/^((?![*_])punctSpace)/, 'u')\n    .replace(/punctSpace/g, _punctuationOrSpace).getRegex();\n// sequences em should skip over [title](link), `code`, <html>\nconst blockSkip = /\\[[^[\\]]*?\\]\\((?:\\\\.|[^\\\\\\(\\)]|\\((?:\\\\.|[^\\\\\\(\\)])*\\))*\\)|`[^`]*?`|<[^<>]*?>/g;\nconst emStrongLDelim = edit(/^(?:\\*+(?:((?!\\*)punct)|[^\\s*]))|^_+(?:((?!_)punct)|([^\\s_]))/, 'u')\n    .replace(/punct/g, _punctuation)\n    .getRegex();\nconst emStrongRDelimAst = edit('^[^_*]*?__[^_*]*?\\\\*[^_*]*?(?=__)' // Skip orphan inside strong\n    + '|[^*]+(?=[^*])' // Consume to delim\n    + '|(?!\\\\*)punct(\\\\*+)(?=[\\\\s]|$)' // (1) #*** can only be a Right Delimiter\n    + '|notPunctSpace(\\\\*+)(?!\\\\*)(?=punctSpace|$)' // (2) a***#, a*** can only be a Right Delimiter\n    + '|(?!\\\\*)punctSpace(\\\\*+)(?=notPunctSpace)' // (3) #***a, ***a can only be Left Delimiter\n    + '|[\\\\s](\\\\*+)(?!\\\\*)(?=punct)' // (4) ***# can only be Left Delimiter\n    + '|(?!\\\\*)punct(\\\\*+)(?!\\\\*)(?=punct)' // (5) #***# can be either Left or Right Delimiter\n    + '|notPunctSpace(\\\\*+)(?=notPunctSpace)', 'gu') // (6) a***a can be either Left or Right Delimiter\n    .replace(/notPunctSpace/g, _notPunctuationOrSpace)\n    .replace(/punctSpace/g, _punctuationOrSpace)\n    .replace(/punct/g, _punctuation)\n    .getRegex();\n// (6) Not allowed for _\nconst emStrongRDelimUnd = edit('^[^_*]*?\\\\*\\\\*[^_*]*?_[^_*]*?(?=\\\\*\\\\*)' // Skip orphan inside strong\n    + '|[^_]+(?=[^_])' // Consume to delim\n    + '|(?!_)punct(_+)(?=[\\\\s]|$)' // (1) #___ can only be a Right Delimiter\n    + '|notPunctSpace(_+)(?!_)(?=punctSpace|$)' // (2) a___#, a___ can only be a Right Delimiter\n    + '|(?!_)punctSpace(_+)(?=notPunctSpace)' // (3) #___a, ___a can only be Left Delimiter\n    + '|[\\\\s](_+)(?!_)(?=punct)' // (4) ___# can only be Left Delimiter\n    + '|(?!_)punct(_+)(?!_)(?=punct)', 'gu') // (5) #___# can be either Left or Right Delimiter\n    .replace(/notPunctSpace/g, _notPunctuationOrSpace)\n    .replace(/punctSpace/g, _punctuationOrSpace)\n    .replace(/punct/g, _punctuation)\n    .getRegex();\nconst anyPunctuation = edit(/\\\\(punct)/, 'gu')\n    .replace(/punct/g, _punctuation)\n    .getRegex();\nconst autolink = edit(/^<(scheme:[^\\s\\x00-\\x1f<>]*|email)>/)\n    .replace('scheme', /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/)\n    .replace('email', /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/)\n    .getRegex();\nconst _inlineComment = edit(_comment).replace('(?:-->|$)', '-->').getRegex();\nconst tag = edit('^comment'\n    + '|^</[a-zA-Z][\\\\w:-]*\\\\s*>' // self-closing tag\n    + '|^<[a-zA-Z][\\\\w-]*(?:attribute)*?\\\\s*/?>' // open tag\n    + '|^<\\\\?[\\\\s\\\\S]*?\\\\?>' // processing instruction, e.g. <?php ?>\n    + '|^<![a-zA-Z]+\\\\s[\\\\s\\\\S]*?>' // declaration, e.g. <!DOCTYPE html>\n    + '|^<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>') // CDATA section\n    .replace('comment', _inlineComment)\n    .replace('attribute', /\\s+[a-zA-Z:_][\\w.:-]*(?:\\s*=\\s*\"[^\"]*\"|\\s*=\\s*'[^']*'|\\s*=\\s*[^\\s\"'=<>`]+)?/)\n    .getRegex();\nconst _inlineLabel = /(?:\\[(?:\\\\.|[^\\[\\]\\\\])*\\]|\\\\.|`[^`]*`|[^\\[\\]\\\\`])*?/;\nconst link = edit(/^!?\\[(label)\\]\\(\\s*(href)(?:\\s+(title))?\\s*\\)/)\n    .replace('label', _inlineLabel)\n    .replace('href', /<(?:\\\\.|[^\\n<>\\\\])+>|[^\\s\\x00-\\x1f]*/)\n    .replace('title', /\"(?:\\\\\"?|[^\"\\\\])*\"|'(?:\\\\'?|[^'\\\\])*'|\\((?:\\\\\\)?|[^)\\\\])*\\)/)\n    .getRegex();\nconst reflink = edit(/^!?\\[(label)\\]\\[(ref)\\]/)\n    .replace('label', _inlineLabel)\n    .replace('ref', _blockLabel)\n    .getRegex();\nconst nolink = edit(/^!?\\[(ref)\\](?:\\[\\])?/)\n    .replace('ref', _blockLabel)\n    .getRegex();\nconst reflinkSearch = edit('reflink|nolink(?!\\\\()', 'g')\n    .replace('reflink', reflink)\n    .replace('nolink', nolink)\n    .getRegex();\n/**\n * Normal Inline Grammar\n */\nconst inlineNormal = {\n    _backpedal: noopTest, // only used for GFM url\n    anyPunctuation,\n    autolink,\n    blockSkip,\n    br,\n    code: inlineCode,\n    del: noopTest,\n    emStrongLDelim,\n    emStrongRDelimAst,\n    emStrongRDelimUnd,\n    escape: escape$1,\n    link,\n    nolink,\n    punctuation,\n    reflink,\n    reflinkSearch,\n    tag,\n    text: inlineText,\n    url: noopTest,\n};\n/**\n * Pedantic Inline Grammar\n */\nconst inlinePedantic = {\n    ...inlineNormal,\n    link: edit(/^!?\\[(label)\\]\\((.*?)\\)/)\n        .replace('label', _inlineLabel)\n        .getRegex(),\n    reflink: edit(/^!?\\[(label)\\]\\s*\\[([^\\]]*)\\]/)\n        .replace('label', _inlineLabel)\n        .getRegex(),\n};\n/**\n * GFM Inline Grammar\n */\nconst inlineGfm = {\n    ...inlineNormal,\n    escape: edit(escape$1).replace('])', '~|])').getRegex(),\n    url: edit(/^((?:ftp|https?):\\/\\/|www\\.)(?:[a-zA-Z0-9\\-]+\\.?)+[^\\s<]*|^email/, 'i')\n        .replace('email', /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/)\n        .getRegex(),\n    _backpedal: /(?:[^?!.,:;*_'\"~()&]+|\\([^)]*\\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_'\"~)]+(?!$))+/,\n    del: /^(~~?)(?=[^\\s~])((?:\\\\.|[^\\\\])*?(?:\\\\.|[^\\s~\\\\]))\\1(?=[^~]|$)/,\n    text: /^([`~]+|[^`~])(?:(?= {2,}\\n)|(?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*~_]|\\b_|https?:\\/\\/|ftp:\\/\\/|www\\.|$)|[^ ](?= {2,}\\n)|[^a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-](?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)))/,\n};\n/**\n * GFM + Line Breaks Inline Grammar\n */\nconst inlineBreaks = {\n    ...inlineGfm,\n    br: edit(br).replace('{2,}', '*').getRegex(),\n    text: edit(inlineGfm.text)\n        .replace('\\\\b_', '\\\\b_| {2,}\\\\n')\n        .replace(/\\{2,\\}/g, '*')\n        .getRegex(),\n};\n/**\n * exports\n */\nconst block = {\n    normal: blockNormal,\n    gfm: blockGfm,\n    pedantic: blockPedantic,\n};\nconst inline = {\n    normal: inlineNormal,\n    gfm: inlineGfm,\n    breaks: inlineBreaks,\n    pedantic: inlinePedantic,\n};\n\n/**\n * Helpers\n */\nconst escapeReplacements = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#39;',\n};\nconst getEscapeReplacement = (ch) => escapeReplacements[ch];\nfunction escape(html, encode) {\n    if (encode) {\n        if (other.escapeTest.test(html)) {\n            return html.replace(other.escapeReplace, getEscapeReplacement);\n        }\n    }\n    else {\n        if (other.escapeTestNoEncode.test(html)) {\n            return html.replace(other.escapeReplaceNoEncode, getEscapeReplacement);\n        }\n    }\n    return html;\n}\nfunction cleanUrl(href) {\n    try {\n        href = encodeURI(href).replace(other.percentDecode, '%');\n    }\n    catch {\n        return null;\n    }\n    return href;\n}\nfunction splitCells(tableRow, count) {\n    // ensure that every cell-delimiting pipe has a space\n    // before it to distinguish it from an escaped pipe\n    const row = tableRow.replace(other.findPipe, (match, offset, str) => {\n        let escaped = false;\n        let curr = offset;\n        while (--curr >= 0 && str[curr] === '\\\\')\n            escaped = !escaped;\n        if (escaped) {\n            // odd number of slashes means | is escaped\n            // so we leave it alone\n            return '|';\n        }\n        else {\n            // add space before unescaped |\n            return ' |';\n        }\n    }), cells = row.split(other.splitPipe);\n    let i = 0;\n    // First/last cell in a row cannot be empty if it has no leading/trailing pipe\n    if (!cells[0].trim()) {\n        cells.shift();\n    }\n    if (cells.length > 0 && !cells.at(-1)?.trim()) {\n        cells.pop();\n    }\n    if (count) {\n        if (cells.length > count) {\n            cells.splice(count);\n        }\n        else {\n            while (cells.length < count)\n                cells.push('');\n        }\n    }\n    for (; i < cells.length; i++) {\n        // leading or trailing whitespace is ignored per the gfm spec\n        cells[i] = cells[i].trim().replace(other.slashPipe, '|');\n    }\n    return cells;\n}\n/**\n * Remove trailing 'c's. Equivalent to str.replace(/c*$/, '').\n * /c*$/ is vulnerable to REDOS.\n *\n * @param str\n * @param c\n * @param invert Remove suffix of non-c chars instead. Default falsey.\n */\nfunction rtrim(str, c, invert) {\n    const l = str.length;\n    if (l === 0) {\n        return '';\n    }\n    // Length of suffix matching the invert condition.\n    let suffLen = 0;\n    // Step left until we fail to match the invert condition.\n    while (suffLen < l) {\n        const currChar = str.charAt(l - suffLen - 1);\n        if (currChar === c && !invert) {\n            suffLen++;\n        }\n        else if (currChar !== c && invert) {\n            suffLen++;\n        }\n        else {\n            break;\n        }\n    }\n    return str.slice(0, l - suffLen);\n}\nfunction findClosingBracket(str, b) {\n    if (str.indexOf(b[1]) === -1) {\n        return -1;\n    }\n    let level = 0;\n    for (let i = 0; i < str.length; i++) {\n        if (str[i] === '\\\\') {\n            i++;\n        }\n        else if (str[i] === b[0]) {\n            level++;\n        }\n        else if (str[i] === b[1]) {\n            level--;\n            if (level < 0) {\n                return i;\n            }\n        }\n    }\n    return -1;\n}\n\nfunction outputLink(cap, link, raw, lexer, rules) {\n    const href = link.href;\n    const title = link.title || null;\n    const text = cap[1].replace(rules.other.outputLinkReplace, '$1');\n    if (cap[0].charAt(0) !== '!') {\n        lexer.state.inLink = true;\n        const token = {\n            type: 'link',\n            raw,\n            href,\n            title,\n            text,\n            tokens: lexer.inlineTokens(text),\n        };\n        lexer.state.inLink = false;\n        return token;\n    }\n    return {\n        type: 'image',\n        raw,\n        href,\n        title,\n        text,\n    };\n}\nfunction indentCodeCompensation(raw, text, rules) {\n    const matchIndentToCode = raw.match(rules.other.indentCodeCompensation);\n    if (matchIndentToCode === null) {\n        return text;\n    }\n    const indentToCode = matchIndentToCode[1];\n    return text\n        .split('\\n')\n        .map(node => {\n        const matchIndentInNode = node.match(rules.other.beginningSpace);\n        if (matchIndentInNode === null) {\n            return node;\n        }\n        const [indentInNode] = matchIndentInNode;\n        if (indentInNode.length >= indentToCode.length) {\n            return node.slice(indentToCode.length);\n        }\n        return node;\n    })\n        .join('\\n');\n}\n/**\n * Tokenizer\n */\nclass _Tokenizer {\n    options;\n    rules; // set by the lexer\n    lexer; // set by the lexer\n    constructor(options) {\n        this.options = options || _defaults;\n    }\n    space(src) {\n        const cap = this.rules.block.newline.exec(src);\n        if (cap && cap[0].length > 0) {\n            return {\n                type: 'space',\n                raw: cap[0],\n            };\n        }\n    }\n    code(src) {\n        const cap = this.rules.block.code.exec(src);\n        if (cap) {\n            const text = cap[0].replace(this.rules.other.codeRemoveIndent, '');\n            return {\n                type: 'code',\n                raw: cap[0],\n                codeBlockStyle: 'indented',\n                text: !this.options.pedantic\n                    ? rtrim(text, '\\n')\n                    : text,\n            };\n        }\n    }\n    fences(src) {\n        const cap = this.rules.block.fences.exec(src);\n        if (cap) {\n            const raw = cap[0];\n            const text = indentCodeCompensation(raw, cap[3] || '', this.rules);\n            return {\n                type: 'code',\n                raw,\n                lang: cap[2] ? cap[2].trim().replace(this.rules.inline.anyPunctuation, '$1') : cap[2],\n                text,\n            };\n        }\n    }\n    heading(src) {\n        const cap = this.rules.block.heading.exec(src);\n        if (cap) {\n            let text = cap[2].trim();\n            // remove trailing #s\n            if (this.rules.other.endingHash.test(text)) {\n                const trimmed = rtrim(text, '#');\n                if (this.options.pedantic) {\n                    text = trimmed.trim();\n                }\n                else if (!trimmed || this.rules.other.endingSpaceChar.test(trimmed)) {\n                    // CommonMark requires space before trailing #s\n                    text = trimmed.trim();\n                }\n            }\n            return {\n                type: 'heading',\n                raw: cap[0],\n                depth: cap[1].length,\n                text,\n                tokens: this.lexer.inline(text),\n            };\n        }\n    }\n    hr(src) {\n        const cap = this.rules.block.hr.exec(src);\n        if (cap) {\n            return {\n                type: 'hr',\n                raw: rtrim(cap[0], '\\n'),\n            };\n        }\n    }\n    blockquote(src) {\n        const cap = this.rules.block.blockquote.exec(src);\n        if (cap) {\n            let lines = rtrim(cap[0], '\\n').split('\\n');\n            let raw = '';\n            let text = '';\n            const tokens = [];\n            while (lines.length > 0) {\n                let inBlockquote = false;\n                const currentLines = [];\n                let i;\n                for (i = 0; i < lines.length; i++) {\n                    // get lines up to a continuation\n                    if (this.rules.other.blockquoteStart.test(lines[i])) {\n                        currentLines.push(lines[i]);\n                        inBlockquote = true;\n                    }\n                    else if (!inBlockquote) {\n                        currentLines.push(lines[i]);\n                    }\n                    else {\n                        break;\n                    }\n                }\n                lines = lines.slice(i);\n                const currentRaw = currentLines.join('\\n');\n                const currentText = currentRaw\n                    // precede setext continuation with 4 spaces so it isn't a setext\n                    .replace(this.rules.other.blockquoteSetextReplace, '\\n    $1')\n                    .replace(this.rules.other.blockquoteSetextReplace2, '');\n                raw = raw ? `${raw}\\n${currentRaw}` : currentRaw;\n                text = text ? `${text}\\n${currentText}` : currentText;\n                // parse blockquote lines as top level tokens\n                // merge paragraphs if this is a continuation\n                const top = this.lexer.state.top;\n                this.lexer.state.top = true;\n                this.lexer.blockTokens(currentText, tokens, true);\n                this.lexer.state.top = top;\n                // if there is no continuation then we are done\n                if (lines.length === 0) {\n                    break;\n                }\n                const lastToken = tokens.at(-1);\n                if (lastToken?.type === 'code') {\n                    // blockquote continuation cannot be preceded by a code block\n                    break;\n                }\n                else if (lastToken?.type === 'blockquote') {\n                    // include continuation in nested blockquote\n                    const oldToken = lastToken;\n                    const newText = oldToken.raw + '\\n' + lines.join('\\n');\n                    const newToken = this.blockquote(newText);\n                    tokens[tokens.length - 1] = newToken;\n                    raw = raw.substring(0, raw.length - oldToken.raw.length) + newToken.raw;\n                    text = text.substring(0, text.length - oldToken.text.length) + newToken.text;\n                    break;\n                }\n                else if (lastToken?.type === 'list') {\n                    // include continuation in nested list\n                    const oldToken = lastToken;\n                    const newText = oldToken.raw + '\\n' + lines.join('\\n');\n                    const newToken = this.list(newText);\n                    tokens[tokens.length - 1] = newToken;\n                    raw = raw.substring(0, raw.length - lastToken.raw.length) + newToken.raw;\n                    text = text.substring(0, text.length - oldToken.raw.length) + newToken.raw;\n                    lines = newText.substring(tokens.at(-1).raw.length).split('\\n');\n                    continue;\n                }\n            }\n            return {\n                type: 'blockquote',\n                raw,\n                tokens,\n                text,\n            };\n        }\n    }\n    list(src) {\n        let cap = this.rules.block.list.exec(src);\n        if (cap) {\n            let bull = cap[1].trim();\n            const isordered = bull.length > 1;\n            const list = {\n                type: 'list',\n                raw: '',\n                ordered: isordered,\n                start: isordered ? +bull.slice(0, -1) : '',\n                loose: false,\n                items: [],\n            };\n            bull = isordered ? `\\\\d{1,9}\\\\${bull.slice(-1)}` : `\\\\${bull}`;\n            if (this.options.pedantic) {\n                bull = isordered ? bull : '[*+-]';\n            }\n            // Get next list item\n            const itemRegex = this.rules.other.listItemRegex(bull);\n            let endsWithBlankLine = false;\n            // Check if current bullet point can start a new List Item\n            while (src) {\n                let endEarly = false;\n                let raw = '';\n                let itemContents = '';\n                if (!(cap = itemRegex.exec(src))) {\n                    break;\n                }\n                if (this.rules.block.hr.test(src)) { // End list if bullet was actually HR (possibly move into itemRegex?)\n                    break;\n                }\n                raw = cap[0];\n                src = src.substring(raw.length);\n                let line = cap[2].split('\\n', 1)[0].replace(this.rules.other.listReplaceTabs, (t) => ' '.repeat(3 * t.length));\n                let nextLine = src.split('\\n', 1)[0];\n                let blankLine = !line.trim();\n                let indent = 0;\n                if (this.options.pedantic) {\n                    indent = 2;\n                    itemContents = line.trimStart();\n                }\n                else if (blankLine) {\n                    indent = cap[1].length + 1;\n                }\n                else {\n                    indent = cap[2].search(this.rules.other.nonSpaceChar); // Find first non-space char\n                    indent = indent > 4 ? 1 : indent; // Treat indented code blocks (> 4 spaces) as having only 1 indent\n                    itemContents = line.slice(indent);\n                    indent += cap[1].length;\n                }\n                if (blankLine && this.rules.other.blankLine.test(nextLine)) { // Items begin with at most one blank line\n                    raw += nextLine + '\\n';\n                    src = src.substring(nextLine.length + 1);\n                    endEarly = true;\n                }\n                if (!endEarly) {\n                    const nextBulletRegex = this.rules.other.nextBulletRegex(indent);\n                    const hrRegex = this.rules.other.hrRegex(indent);\n                    const fencesBeginRegex = this.rules.other.fencesBeginRegex(indent);\n                    const headingBeginRegex = this.rules.other.headingBeginRegex(indent);\n                    const htmlBeginRegex = this.rules.other.htmlBeginRegex(indent);\n                    // Check if following lines should be included in List Item\n                    while (src) {\n                        const rawLine = src.split('\\n', 1)[0];\n                        let nextLineWithoutTabs;\n                        nextLine = rawLine;\n                        // Re-align to follow commonmark nesting rules\n                        if (this.options.pedantic) {\n                            nextLine = nextLine.replace(this.rules.other.listReplaceNesting, '  ');\n                            nextLineWithoutTabs = nextLine;\n                        }\n                        else {\n                            nextLineWithoutTabs = nextLine.replace(this.rules.other.tabCharGlobal, '    ');\n                        }\n                        // End list item if found code fences\n                        if (fencesBeginRegex.test(nextLine)) {\n                            break;\n                        }\n                        // End list item if found start of new heading\n                        if (headingBeginRegex.test(nextLine)) {\n                            break;\n                        }\n                        // End list item if found start of html block\n                        if (htmlBeginRegex.test(nextLine)) {\n                            break;\n                        }\n                        // End list item if found start of new bullet\n                        if (nextBulletRegex.test(nextLine)) {\n                            break;\n                        }\n                        // Horizontal rule found\n                        if (hrRegex.test(nextLine)) {\n                            break;\n                        }\n                        if (nextLineWithoutTabs.search(this.rules.other.nonSpaceChar) >= indent || !nextLine.trim()) { // Dedent if possible\n                            itemContents += '\\n' + nextLineWithoutTabs.slice(indent);\n                        }\n                        else {\n                            // not enough indentation\n                            if (blankLine) {\n                                break;\n                            }\n                            // paragraph continuation unless last line was a different block level element\n                            if (line.replace(this.rules.other.tabCharGlobal, '    ').search(this.rules.other.nonSpaceChar) >= 4) { // indented code block\n                                break;\n                            }\n                            if (fencesBeginRegex.test(line)) {\n                                break;\n                            }\n                            if (headingBeginRegex.test(line)) {\n                                break;\n                            }\n                            if (hrRegex.test(line)) {\n                                break;\n                            }\n                            itemContents += '\\n' + nextLine;\n                        }\n                        if (!blankLine && !nextLine.trim()) { // Check if current line is blank\n                            blankLine = true;\n                        }\n                        raw += rawLine + '\\n';\n                        src = src.substring(rawLine.length + 1);\n                        line = nextLineWithoutTabs.slice(indent);\n                    }\n                }\n                if (!list.loose) {\n                    // If the previous item ended with a blank line, the list is loose\n                    if (endsWithBlankLine) {\n                        list.loose = true;\n                    }\n                    else if (this.rules.other.doubleBlankLine.test(raw)) {\n                        endsWithBlankLine = true;\n                    }\n                }\n                let istask = null;\n                let ischecked;\n                // Check for task list items\n                if (this.options.gfm) {\n                    istask = this.rules.other.listIsTask.exec(itemContents);\n                    if (istask) {\n                        ischecked = istask[0] !== '[ ] ';\n                        itemContents = itemContents.replace(this.rules.other.listReplaceTask, '');\n                    }\n                }\n                list.items.push({\n                    type: 'list_item',\n                    raw,\n                    task: !!istask,\n                    checked: ischecked,\n                    loose: false,\n                    text: itemContents,\n                    tokens: [],\n                });\n                list.raw += raw;\n            }\n            // Do not consume newlines at end of final item. Alternatively, make itemRegex *start* with any newlines to simplify/speed up endsWithBlankLine logic\n            const lastItem = list.items.at(-1);\n            if (lastItem) {\n                lastItem.raw = lastItem.raw.trimEnd();\n                lastItem.text = lastItem.text.trimEnd();\n            }\n            else {\n                // not a list since there were no items\n                return;\n            }\n            list.raw = list.raw.trimEnd();\n            // Item child tokens handled here at end because we needed to have the final item to trim it first\n            for (let i = 0; i < list.items.length; i++) {\n                this.lexer.state.top = false;\n                list.items[i].tokens = this.lexer.blockTokens(list.items[i].text, []);\n                if (!list.loose) {\n                    // Check if list should be loose\n                    const spacers = list.items[i].tokens.filter(t => t.type === 'space');\n                    const hasMultipleLineBreaks = spacers.length > 0 && spacers.some(t => this.rules.other.anyLine.test(t.raw));\n                    list.loose = hasMultipleLineBreaks;\n                }\n            }\n            // Set all items to loose if list is loose\n            if (list.loose) {\n                for (let i = 0; i < list.items.length; i++) {\n                    list.items[i].loose = true;\n                }\n            }\n            return list;\n        }\n    }\n    html(src) {\n        const cap = this.rules.block.html.exec(src);\n        if (cap) {\n            const token = {\n                type: 'html',\n                block: true,\n                raw: cap[0],\n                pre: cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style',\n                text: cap[0],\n            };\n            return token;\n        }\n    }\n    def(src) {\n        const cap = this.rules.block.def.exec(src);\n        if (cap) {\n            const tag = cap[1].toLowerCase().replace(this.rules.other.multipleSpaceGlobal, ' ');\n            const href = cap[2] ? cap[2].replace(this.rules.other.hrefBrackets, '$1').replace(this.rules.inline.anyPunctuation, '$1') : '';\n            const title = cap[3] ? cap[3].substring(1, cap[3].length - 1).replace(this.rules.inline.anyPunctuation, '$1') : cap[3];\n            return {\n                type: 'def',\n                tag,\n                raw: cap[0],\n                href,\n                title,\n            };\n        }\n    }\n    table(src) {\n        const cap = this.rules.block.table.exec(src);\n        if (!cap) {\n            return;\n        }\n        if (!this.rules.other.tableDelimiter.test(cap[2])) {\n            // delimiter row must have a pipe (|) or colon (:) otherwise it is a setext heading\n            return;\n        }\n        const headers = splitCells(cap[1]);\n        const aligns = cap[2].replace(this.rules.other.tableAlignChars, '').split('|');\n        const rows = cap[3]?.trim() ? cap[3].replace(this.rules.other.tableRowBlankLine, '').split('\\n') : [];\n        const item = {\n            type: 'table',\n            raw: cap[0],\n            header: [],\n            align: [],\n            rows: [],\n        };\n        if (headers.length !== aligns.length) {\n            // header and align columns must be equal, rows can be different.\n            return;\n        }\n        for (const align of aligns) {\n            if (this.rules.other.tableAlignRight.test(align)) {\n                item.align.push('right');\n            }\n            else if (this.rules.other.tableAlignCenter.test(align)) {\n                item.align.push('center');\n            }\n            else if (this.rules.other.tableAlignLeft.test(align)) {\n                item.align.push('left');\n            }\n            else {\n                item.align.push(null);\n            }\n        }\n        for (let i = 0; i < headers.length; i++) {\n            item.header.push({\n                text: headers[i],\n                tokens: this.lexer.inline(headers[i]),\n                header: true,\n                align: item.align[i],\n            });\n        }\n        for (const row of rows) {\n            item.rows.push(splitCells(row, item.header.length).map((cell, i) => {\n                return {\n                    text: cell,\n                    tokens: this.lexer.inline(cell),\n                    header: false,\n                    align: item.align[i],\n                };\n            }));\n        }\n        return item;\n    }\n    lheading(src) {\n        const cap = this.rules.block.lheading.exec(src);\n        if (cap) {\n            return {\n                type: 'heading',\n                raw: cap[0],\n                depth: cap[2].charAt(0) === '=' ? 1 : 2,\n                text: cap[1],\n                tokens: this.lexer.inline(cap[1]),\n            };\n        }\n    }\n    paragraph(src) {\n        const cap = this.rules.block.paragraph.exec(src);\n        if (cap) {\n            const text = cap[1].charAt(cap[1].length - 1) === '\\n'\n                ? cap[1].slice(0, -1)\n                : cap[1];\n            return {\n                type: 'paragraph',\n                raw: cap[0],\n                text,\n                tokens: this.lexer.inline(text),\n            };\n        }\n    }\n    text(src) {\n        const cap = this.rules.block.text.exec(src);\n        if (cap) {\n            return {\n                type: 'text',\n                raw: cap[0],\n                text: cap[0],\n                tokens: this.lexer.inline(cap[0]),\n            };\n        }\n    }\n    escape(src) {\n        const cap = this.rules.inline.escape.exec(src);\n        if (cap) {\n            return {\n                type: 'escape',\n                raw: cap[0],\n                text: cap[1],\n            };\n        }\n    }\n    tag(src) {\n        const cap = this.rules.inline.tag.exec(src);\n        if (cap) {\n            if (!this.lexer.state.inLink && this.rules.other.startATag.test(cap[0])) {\n                this.lexer.state.inLink = true;\n            }\n            else if (this.lexer.state.inLink && this.rules.other.endATag.test(cap[0])) {\n                this.lexer.state.inLink = false;\n            }\n            if (!this.lexer.state.inRawBlock && this.rules.other.startPreScriptTag.test(cap[0])) {\n                this.lexer.state.inRawBlock = true;\n            }\n            else if (this.lexer.state.inRawBlock && this.rules.other.endPreScriptTag.test(cap[0])) {\n                this.lexer.state.inRawBlock = false;\n            }\n            return {\n                type: 'html',\n                raw: cap[0],\n                inLink: this.lexer.state.inLink,\n                inRawBlock: this.lexer.state.inRawBlock,\n                block: false,\n                text: cap[0],\n            };\n        }\n    }\n    link(src) {\n        const cap = this.rules.inline.link.exec(src);\n        if (cap) {\n            const trimmedUrl = cap[2].trim();\n            if (!this.options.pedantic && this.rules.other.startAngleBracket.test(trimmedUrl)) {\n                // commonmark requires matching angle brackets\n                if (!(this.rules.other.endAngleBracket.test(trimmedUrl))) {\n                    return;\n                }\n                // ending angle bracket cannot be escaped\n                const rtrimSlash = rtrim(trimmedUrl.slice(0, -1), '\\\\');\n                if ((trimmedUrl.length - rtrimSlash.length) % 2 === 0) {\n                    return;\n                }\n            }\n            else {\n                // find closing parenthesis\n                const lastParenIndex = findClosingBracket(cap[2], '()');\n                if (lastParenIndex > -1) {\n                    const start = cap[0].indexOf('!') === 0 ? 5 : 4;\n                    const linkLen = start + cap[1].length + lastParenIndex;\n                    cap[2] = cap[2].substring(0, lastParenIndex);\n                    cap[0] = cap[0].substring(0, linkLen).trim();\n                    cap[3] = '';\n                }\n            }\n            let href = cap[2];\n            let title = '';\n            if (this.options.pedantic) {\n                // split pedantic href and title\n                const link = this.rules.other.pedanticHrefTitle.exec(href);\n                if (link) {\n                    href = link[1];\n                    title = link[3];\n                }\n            }\n            else {\n                title = cap[3] ? cap[3].slice(1, -1) : '';\n            }\n            href = href.trim();\n            if (this.rules.other.startAngleBracket.test(href)) {\n                if (this.options.pedantic && !(this.rules.other.endAngleBracket.test(trimmedUrl))) {\n                    // pedantic allows starting angle bracket without ending angle bracket\n                    href = href.slice(1);\n                }\n                else {\n                    href = href.slice(1, -1);\n                }\n            }\n            return outputLink(cap, {\n                href: href ? href.replace(this.rules.inline.anyPunctuation, '$1') : href,\n                title: title ? title.replace(this.rules.inline.anyPunctuation, '$1') : title,\n            }, cap[0], this.lexer, this.rules);\n        }\n    }\n    reflink(src, links) {\n        let cap;\n        if ((cap = this.rules.inline.reflink.exec(src))\n            || (cap = this.rules.inline.nolink.exec(src))) {\n            const linkString = (cap[2] || cap[1]).replace(this.rules.other.multipleSpaceGlobal, ' ');\n            const link = links[linkString.toLowerCase()];\n            if (!link) {\n                const text = cap[0].charAt(0);\n                return {\n                    type: 'text',\n                    raw: text,\n                    text,\n                };\n            }\n            return outputLink(cap, link, cap[0], this.lexer, this.rules);\n        }\n    }\n    emStrong(src, maskedSrc, prevChar = '') {\n        let match = this.rules.inline.emStrongLDelim.exec(src);\n        if (!match)\n            return;\n        // _ can't be between two alphanumerics. \\p{L}\\p{N} includes non-english alphabet/numbers as well\n        if (match[3] && prevChar.match(this.rules.other.unicodeAlphaNumeric))\n            return;\n        const nextChar = match[1] || match[2] || '';\n        if (!nextChar || !prevChar || this.rules.inline.punctuation.exec(prevChar)) {\n            // unicode Regex counts emoji as 1 char; spread into array for proper count (used multiple times below)\n            const lLength = [...match[0]].length - 1;\n            let rDelim, rLength, delimTotal = lLength, midDelimTotal = 0;\n            const endReg = match[0][0] === '*' ? this.rules.inline.emStrongRDelimAst : this.rules.inline.emStrongRDelimUnd;\n            endReg.lastIndex = 0;\n            // Clip maskedSrc to same section of string as src (move to lexer?)\n            maskedSrc = maskedSrc.slice(-1 * src.length + lLength);\n            while ((match = endReg.exec(maskedSrc)) != null) {\n                rDelim = match[1] || match[2] || match[3] || match[4] || match[5] || match[6];\n                if (!rDelim)\n                    continue; // skip single * in __abc*abc__\n                rLength = [...rDelim].length;\n                if (match[3] || match[4]) { // found another Left Delim\n                    delimTotal += rLength;\n                    continue;\n                }\n                else if (match[5] || match[6]) { // either Left or Right Delim\n                    if (lLength % 3 && !((lLength + rLength) % 3)) {\n                        midDelimTotal += rLength;\n                        continue; // CommonMark Emphasis Rules 9-10\n                    }\n                }\n                delimTotal -= rLength;\n                if (delimTotal > 0)\n                    continue; // Haven't found enough closing delimiters\n                // Remove extra characters. *a*** -> *a*\n                rLength = Math.min(rLength, rLength + delimTotal + midDelimTotal);\n                // char length can be >1 for unicode characters;\n                const lastCharLength = [...match[0]][0].length;\n                const raw = src.slice(0, lLength + match.index + lastCharLength + rLength);\n                // Create `em` if smallest delimiter has odd char count. *a***\n                if (Math.min(lLength, rLength) % 2) {\n                    const text = raw.slice(1, -1);\n                    return {\n                        type: 'em',\n                        raw,\n                        text,\n                        tokens: this.lexer.inlineTokens(text),\n                    };\n                }\n                // Create 'strong' if smallest delimiter has even char count. **a***\n                const text = raw.slice(2, -2);\n                return {\n                    type: 'strong',\n                    raw,\n                    text,\n                    tokens: this.lexer.inlineTokens(text),\n                };\n            }\n        }\n    }\n    codespan(src) {\n        const cap = this.rules.inline.code.exec(src);\n        if (cap) {\n            let text = cap[2].replace(this.rules.other.newLineCharGlobal, ' ');\n            const hasNonSpaceChars = this.rules.other.nonSpaceChar.test(text);\n            const hasSpaceCharsOnBothEnds = this.rules.other.startingSpaceChar.test(text) && this.rules.other.endingSpaceChar.test(text);\n            if (hasNonSpaceChars && hasSpaceCharsOnBothEnds) {\n                text = text.substring(1, text.length - 1);\n            }\n            return {\n                type: 'codespan',\n                raw: cap[0],\n                text,\n            };\n        }\n    }\n    br(src) {\n        const cap = this.rules.inline.br.exec(src);\n        if (cap) {\n            return {\n                type: 'br',\n                raw: cap[0],\n            };\n        }\n    }\n    del(src) {\n        const cap = this.rules.inline.del.exec(src);\n        if (cap) {\n            return {\n                type: 'del',\n                raw: cap[0],\n                text: cap[2],\n                tokens: this.lexer.inlineTokens(cap[2]),\n            };\n        }\n    }\n    autolink(src) {\n        const cap = this.rules.inline.autolink.exec(src);\n        if (cap) {\n            let text, href;\n            if (cap[2] === '@') {\n                text = cap[1];\n                href = 'mailto:' + text;\n            }\n            else {\n                text = cap[1];\n                href = text;\n            }\n            return {\n                type: 'link',\n                raw: cap[0],\n                text,\n                href,\n                tokens: [\n                    {\n                        type: 'text',\n                        raw: text,\n                        text,\n                    },\n                ],\n            };\n        }\n    }\n    url(src) {\n        let cap;\n        if (cap = this.rules.inline.url.exec(src)) {\n            let text, href;\n            if (cap[2] === '@') {\n                text = cap[0];\n                href = 'mailto:' + text;\n            }\n            else {\n                // do extended autolink path validation\n                let prevCapZero;\n                do {\n                    prevCapZero = cap[0];\n                    cap[0] = this.rules.inline._backpedal.exec(cap[0])?.[0] ?? '';\n                } while (prevCapZero !== cap[0]);\n                text = cap[0];\n                if (cap[1] === 'www.') {\n                    href = 'http://' + cap[0];\n                }\n                else {\n                    href = cap[0];\n                }\n            }\n            return {\n                type: 'link',\n                raw: cap[0],\n                text,\n                href,\n                tokens: [\n                    {\n                        type: 'text',\n                        raw: text,\n                        text,\n                    },\n                ],\n            };\n        }\n    }\n    inlineText(src) {\n        const cap = this.rules.inline.text.exec(src);\n        if (cap) {\n            const escaped = this.lexer.state.inRawBlock;\n            return {\n                type: 'text',\n                raw: cap[0],\n                text: cap[0],\n                escaped,\n            };\n        }\n    }\n}\n\n/**\n * Block Lexer\n */\nclass _Lexer {\n    tokens;\n    options;\n    state;\n    tokenizer;\n    inlineQueue;\n    constructor(options) {\n        // TokenList cannot be created in one go\n        this.tokens = [];\n        this.tokens.links = Object.create(null);\n        this.options = options || _defaults;\n        this.options.tokenizer = this.options.tokenizer || new _Tokenizer();\n        this.tokenizer = this.options.tokenizer;\n        this.tokenizer.options = this.options;\n        this.tokenizer.lexer = this;\n        this.inlineQueue = [];\n        this.state = {\n            inLink: false,\n            inRawBlock: false,\n            top: true,\n        };\n        const rules = {\n            other,\n            block: block.normal,\n            inline: inline.normal,\n        };\n        if (this.options.pedantic) {\n            rules.block = block.pedantic;\n            rules.inline = inline.pedantic;\n        }\n        else if (this.options.gfm) {\n            rules.block = block.gfm;\n            if (this.options.breaks) {\n                rules.inline = inline.breaks;\n            }\n            else {\n                rules.inline = inline.gfm;\n            }\n        }\n        this.tokenizer.rules = rules;\n    }\n    /**\n     * Expose Rules\n     */\n    static get rules() {\n        return {\n            block,\n            inline,\n        };\n    }\n    /**\n     * Static Lex Method\n     */\n    static lex(src, options) {\n        const lexer = new _Lexer(options);\n        return lexer.lex(src);\n    }\n    /**\n     * Static Lex Inline Method\n     */\n    static lexInline(src, options) {\n        const lexer = new _Lexer(options);\n        return lexer.inlineTokens(src);\n    }\n    /**\n     * Preprocessing\n     */\n    lex(src) {\n        src = src.replace(other.carriageReturn, '\\n');\n        this.blockTokens(src, this.tokens);\n        for (let i = 0; i < this.inlineQueue.length; i++) {\n            const next = this.inlineQueue[i];\n            this.inlineTokens(next.src, next.tokens);\n        }\n        this.inlineQueue = [];\n        return this.tokens;\n    }\n    blockTokens(src, tokens = [], lastParagraphClipped = false) {\n        if (this.options.pedantic) {\n            src = src.replace(other.tabCharGlobal, '    ').replace(other.spaceLine, '');\n        }\n        while (src) {\n            let token;\n            if (this.options.extensions?.block?.some((extTokenizer) => {\n                if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n                    src = src.substring(token.raw.length);\n                    tokens.push(token);\n                    return true;\n                }\n                return false;\n            })) {\n                continue;\n            }\n            // newline\n            if (token = this.tokenizer.space(src)) {\n                src = src.substring(token.raw.length);\n                const lastToken = tokens.at(-1);\n                if (token.raw.length === 1 && lastToken !== undefined) {\n                    // if there's a single \\n as a spacer, it's terminating the last line,\n                    // so move it there so that we don't get unnecessary paragraph tags\n                    lastToken.raw += '\\n';\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // code\n            if (token = this.tokenizer.code(src)) {\n                src = src.substring(token.raw.length);\n                const lastToken = tokens.at(-1);\n                // An indented code block cannot interrupt a paragraph.\n                if (lastToken?.type === 'paragraph' || lastToken?.type === 'text') {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.text;\n                    this.inlineQueue.at(-1).src = lastToken.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // fences\n            if (token = this.tokenizer.fences(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // heading\n            if (token = this.tokenizer.heading(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // hr\n            if (token = this.tokenizer.hr(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // blockquote\n            if (token = this.tokenizer.blockquote(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // list\n            if (token = this.tokenizer.list(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // html\n            if (token = this.tokenizer.html(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // def\n            if (token = this.tokenizer.def(src)) {\n                src = src.substring(token.raw.length);\n                const lastToken = tokens.at(-1);\n                if (lastToken?.type === 'paragraph' || lastToken?.type === 'text') {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.raw;\n                    this.inlineQueue.at(-1).src = lastToken.text;\n                }\n                else if (!this.tokens.links[token.tag]) {\n                    this.tokens.links[token.tag] = {\n                        href: token.href,\n                        title: token.title,\n                    };\n                }\n                continue;\n            }\n            // table (gfm)\n            if (token = this.tokenizer.table(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // lheading\n            if (token = this.tokenizer.lheading(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // top-level paragraph\n            // prevent paragraph consuming extensions by clipping 'src' to extension start\n            let cutSrc = src;\n            if (this.options.extensions?.startBlock) {\n                let startIndex = Infinity;\n                const tempSrc = src.slice(1);\n                let tempStart;\n                this.options.extensions.startBlock.forEach((getStartIndex) => {\n                    tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n                    if (typeof tempStart === 'number' && tempStart >= 0) {\n                        startIndex = Math.min(startIndex, tempStart);\n                    }\n                });\n                if (startIndex < Infinity && startIndex >= 0) {\n                    cutSrc = src.substring(0, startIndex + 1);\n                }\n            }\n            if (this.state.top && (token = this.tokenizer.paragraph(cutSrc))) {\n                const lastToken = tokens.at(-1);\n                if (lastParagraphClipped && lastToken?.type === 'paragraph') {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.text;\n                    this.inlineQueue.pop();\n                    this.inlineQueue.at(-1).src = lastToken.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                lastParagraphClipped = cutSrc.length !== src.length;\n                src = src.substring(token.raw.length);\n                continue;\n            }\n            // text\n            if (token = this.tokenizer.text(src)) {\n                src = src.substring(token.raw.length);\n                const lastToken = tokens.at(-1);\n                if (lastToken?.type === 'text') {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.text;\n                    this.inlineQueue.pop();\n                    this.inlineQueue.at(-1).src = lastToken.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            if (src) {\n                const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n                if (this.options.silent) {\n                    console.error(errMsg);\n                    break;\n                }\n                else {\n                    throw new Error(errMsg);\n                }\n            }\n        }\n        this.state.top = true;\n        return tokens;\n    }\n    inline(src, tokens = []) {\n        this.inlineQueue.push({ src, tokens });\n        return tokens;\n    }\n    /**\n     * Lexing/Compiling\n     */\n    inlineTokens(src, tokens = []) {\n        // String with links masked to avoid interference with em and strong\n        let maskedSrc = src;\n        let match = null;\n        // Mask out reflinks\n        if (this.tokens.links) {\n            const links = Object.keys(this.tokens.links);\n            if (links.length > 0) {\n                while ((match = this.tokenizer.rules.inline.reflinkSearch.exec(maskedSrc)) != null) {\n                    if (links.includes(match[0].slice(match[0].lastIndexOf('[') + 1, -1))) {\n                        maskedSrc = maskedSrc.slice(0, match.index)\n                            + '[' + 'a'.repeat(match[0].length - 2) + ']'\n                            + maskedSrc.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex);\n                    }\n                }\n            }\n        }\n        // Mask out other blocks\n        while ((match = this.tokenizer.rules.inline.blockSkip.exec(maskedSrc)) != null) {\n            maskedSrc = maskedSrc.slice(0, match.index) + '[' + 'a'.repeat(match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);\n        }\n        // Mask out escaped characters\n        while ((match = this.tokenizer.rules.inline.anyPunctuation.exec(maskedSrc)) != null) {\n            maskedSrc = maskedSrc.slice(0, match.index) + '++' + maskedSrc.slice(this.tokenizer.rules.inline.anyPunctuation.lastIndex);\n        }\n        let keepPrevChar = false;\n        let prevChar = '';\n        while (src) {\n            if (!keepPrevChar) {\n                prevChar = '';\n            }\n            keepPrevChar = false;\n            let token;\n            // extensions\n            if (this.options.extensions?.inline?.some((extTokenizer) => {\n                if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n                    src = src.substring(token.raw.length);\n                    tokens.push(token);\n                    return true;\n                }\n                return false;\n            })) {\n                continue;\n            }\n            // escape\n            if (token = this.tokenizer.escape(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // tag\n            if (token = this.tokenizer.tag(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // link\n            if (token = this.tokenizer.link(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // reflink, nolink\n            if (token = this.tokenizer.reflink(src, this.tokens.links)) {\n                src = src.substring(token.raw.length);\n                const lastToken = tokens.at(-1);\n                if (token.type === 'text' && lastToken?.type === 'text') {\n                    lastToken.raw += token.raw;\n                    lastToken.text += token.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // em & strong\n            if (token = this.tokenizer.emStrong(src, maskedSrc, prevChar)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // code\n            if (token = this.tokenizer.codespan(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // br\n            if (token = this.tokenizer.br(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // del (gfm)\n            if (token = this.tokenizer.del(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // autolink\n            if (token = this.tokenizer.autolink(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // url (gfm)\n            if (!this.state.inLink && (token = this.tokenizer.url(src))) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // text\n            // prevent inlineText consuming extensions by clipping 'src' to extension start\n            let cutSrc = src;\n            if (this.options.extensions?.startInline) {\n                let startIndex = Infinity;\n                const tempSrc = src.slice(1);\n                let tempStart;\n                this.options.extensions.startInline.forEach((getStartIndex) => {\n                    tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n                    if (typeof tempStart === 'number' && tempStart >= 0) {\n                        startIndex = Math.min(startIndex, tempStart);\n                    }\n                });\n                if (startIndex < Infinity && startIndex >= 0) {\n                    cutSrc = src.substring(0, startIndex + 1);\n                }\n            }\n            if (token = this.tokenizer.inlineText(cutSrc)) {\n                src = src.substring(token.raw.length);\n                if (token.raw.slice(-1) !== '_') { // Track prevChar before string of ____ started\n                    prevChar = token.raw.slice(-1);\n                }\n                keepPrevChar = true;\n                const lastToken = tokens.at(-1);\n                if (lastToken?.type === 'text') {\n                    lastToken.raw += token.raw;\n                    lastToken.text += token.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            if (src) {\n                const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n                if (this.options.silent) {\n                    console.error(errMsg);\n                    break;\n                }\n                else {\n                    throw new Error(errMsg);\n                }\n            }\n        }\n        return tokens;\n    }\n}\n\n/**\n * Renderer\n */\nclass _Renderer {\n    options;\n    parser; // set by the parser\n    constructor(options) {\n        this.options = options || _defaults;\n    }\n    space(token) {\n        return '';\n    }\n    code({ text, lang, escaped }) {\n        const langString = (lang || '').match(other.notSpaceStart)?.[0];\n        const code = text.replace(other.endingNewline, '') + '\\n';\n        if (!langString) {\n            return '<pre><code>'\n                + (escaped ? code : escape(code, true))\n                + '</code></pre>\\n';\n        }\n        return '<pre><code class=\"language-'\n            + escape(langString)\n            + '\">'\n            + (escaped ? code : escape(code, true))\n            + '</code></pre>\\n';\n    }\n    blockquote({ tokens }) {\n        const body = this.parser.parse(tokens);\n        return `<blockquote>\\n${body}</blockquote>\\n`;\n    }\n    html({ text }) {\n        return text;\n    }\n    heading({ tokens, depth }) {\n        return `<h${depth}>${this.parser.parseInline(tokens)}</h${depth}>\\n`;\n    }\n    hr(token) {\n        return '<hr>\\n';\n    }\n    list(token) {\n        const ordered = token.ordered;\n        const start = token.start;\n        let body = '';\n        for (let j = 0; j < token.items.length; j++) {\n            const item = token.items[j];\n            body += this.listitem(item);\n        }\n        const type = ordered ? 'ol' : 'ul';\n        const startAttr = (ordered && start !== 1) ? (' start=\"' + start + '\"') : '';\n        return '<' + type + startAttr + '>\\n' + body + '</' + type + '>\\n';\n    }\n    listitem(item) {\n        let itemBody = '';\n        if (item.task) {\n            const checkbox = this.checkbox({ checked: !!item.checked });\n            if (item.loose) {\n                if (item.tokens[0]?.type === 'paragraph') {\n                    item.tokens[0].text = checkbox + ' ' + item.tokens[0].text;\n                    if (item.tokens[0].tokens && item.tokens[0].tokens.length > 0 && item.tokens[0].tokens[0].type === 'text') {\n                        item.tokens[0].tokens[0].text = checkbox + ' ' + escape(item.tokens[0].tokens[0].text);\n                        item.tokens[0].tokens[0].escaped = true;\n                    }\n                }\n                else {\n                    item.tokens.unshift({\n                        type: 'text',\n                        raw: checkbox + ' ',\n                        text: checkbox + ' ',\n                        escaped: true,\n                    });\n                }\n            }\n            else {\n                itemBody += checkbox + ' ';\n            }\n        }\n        itemBody += this.parser.parse(item.tokens, !!item.loose);\n        return `<li>${itemBody}</li>\\n`;\n    }\n    checkbox({ checked }) {\n        return '<input '\n            + (checked ? 'checked=\"\" ' : '')\n            + 'disabled=\"\" type=\"checkbox\">';\n    }\n    paragraph({ tokens }) {\n        return `<p>${this.parser.parseInline(tokens)}</p>\\n`;\n    }\n    table(token) {\n        let header = '';\n        // header\n        let cell = '';\n        for (let j = 0; j < token.header.length; j++) {\n            cell += this.tablecell(token.header[j]);\n        }\n        header += this.tablerow({ text: cell });\n        let body = '';\n        for (let j = 0; j < token.rows.length; j++) {\n            const row = token.rows[j];\n            cell = '';\n            for (let k = 0; k < row.length; k++) {\n                cell += this.tablecell(row[k]);\n            }\n            body += this.tablerow({ text: cell });\n        }\n        if (body)\n            body = `<tbody>${body}</tbody>`;\n        return '<table>\\n'\n            + '<thead>\\n'\n            + header\n            + '</thead>\\n'\n            + body\n            + '</table>\\n';\n    }\n    tablerow({ text }) {\n        return `<tr>\\n${text}</tr>\\n`;\n    }\n    tablecell(token) {\n        const content = this.parser.parseInline(token.tokens);\n        const type = token.header ? 'th' : 'td';\n        const tag = token.align\n            ? `<${type} align=\"${token.align}\">`\n            : `<${type}>`;\n        return tag + content + `</${type}>\\n`;\n    }\n    /**\n     * span level renderer\n     */\n    strong({ tokens }) {\n        return `<strong>${this.parser.parseInline(tokens)}</strong>`;\n    }\n    em({ tokens }) {\n        return `<em>${this.parser.parseInline(tokens)}</em>`;\n    }\n    codespan({ text }) {\n        return `<code>${escape(text, true)}</code>`;\n    }\n    br(token) {\n        return '<br>';\n    }\n    del({ tokens }) {\n        return `<del>${this.parser.parseInline(tokens)}</del>`;\n    }\n    link({ href, title, tokens }) {\n        const text = this.parser.parseInline(tokens);\n        const cleanHref = cleanUrl(href);\n        if (cleanHref === null) {\n            return text;\n        }\n        href = cleanHref;\n        let out = '<a href=\"' + href + '\"';\n        if (title) {\n            out += ' title=\"' + (escape(title)) + '\"';\n        }\n        out += '>' + text + '</a>';\n        return out;\n    }\n    image({ href, title, text }) {\n        const cleanHref = cleanUrl(href);\n        if (cleanHref === null) {\n            return escape(text);\n        }\n        href = cleanHref;\n        let out = `<img src=\"${href}\" alt=\"${text}\"`;\n        if (title) {\n            out += ` title=\"${escape(title)}\"`;\n        }\n        out += '>';\n        return out;\n    }\n    text(token) {\n        return 'tokens' in token && token.tokens\n            ? this.parser.parseInline(token.tokens)\n            : ('escaped' in token && token.escaped ? token.text : escape(token.text));\n    }\n}\n\n/**\n * TextRenderer\n * returns only the textual part of the token\n */\nclass _TextRenderer {\n    // no need for block level renderers\n    strong({ text }) {\n        return text;\n    }\n    em({ text }) {\n        return text;\n    }\n    codespan({ text }) {\n        return text;\n    }\n    del({ text }) {\n        return text;\n    }\n    html({ text }) {\n        return text;\n    }\n    text({ text }) {\n        return text;\n    }\n    link({ text }) {\n        return '' + text;\n    }\n    image({ text }) {\n        return '' + text;\n    }\n    br() {\n        return '';\n    }\n}\n\n/**\n * Parsing & Compiling\n */\nclass _Parser {\n    options;\n    renderer;\n    textRenderer;\n    constructor(options) {\n        this.options = options || _defaults;\n        this.options.renderer = this.options.renderer || new _Renderer();\n        this.renderer = this.options.renderer;\n        this.renderer.options = this.options;\n        this.renderer.parser = this;\n        this.textRenderer = new _TextRenderer();\n    }\n    /**\n     * Static Parse Method\n     */\n    static parse(tokens, options) {\n        const parser = new _Parser(options);\n        return parser.parse(tokens);\n    }\n    /**\n     * Static Parse Inline Method\n     */\n    static parseInline(tokens, options) {\n        const parser = new _Parser(options);\n        return parser.parseInline(tokens);\n    }\n    /**\n     * Parse Loop\n     */\n    parse(tokens, top = true) {\n        let out = '';\n        for (let i = 0; i < tokens.length; i++) {\n            const anyToken = tokens[i];\n            // Run any renderer extensions\n            if (this.options.extensions?.renderers?.[anyToken.type]) {\n                const genericToken = anyToken;\n                const ret = this.options.extensions.renderers[genericToken.type].call({ parser: this }, genericToken);\n                if (ret !== false || !['space', 'hr', 'heading', 'code', 'table', 'blockquote', 'list', 'html', 'paragraph', 'text'].includes(genericToken.type)) {\n                    out += ret || '';\n                    continue;\n                }\n            }\n            const token = anyToken;\n            switch (token.type) {\n                case 'space': {\n                    out += this.renderer.space(token);\n                    continue;\n                }\n                case 'hr': {\n                    out += this.renderer.hr(token);\n                    continue;\n                }\n                case 'heading': {\n                    out += this.renderer.heading(token);\n                    continue;\n                }\n                case 'code': {\n                    out += this.renderer.code(token);\n                    continue;\n                }\n                case 'table': {\n                    out += this.renderer.table(token);\n                    continue;\n                }\n                case 'blockquote': {\n                    out += this.renderer.blockquote(token);\n                    continue;\n                }\n                case 'list': {\n                    out += this.renderer.list(token);\n                    continue;\n                }\n                case 'html': {\n                    out += this.renderer.html(token);\n                    continue;\n                }\n                case 'paragraph': {\n                    out += this.renderer.paragraph(token);\n                    continue;\n                }\n                case 'text': {\n                    let textToken = token;\n                    let body = this.renderer.text(textToken);\n                    while (i + 1 < tokens.length && tokens[i + 1].type === 'text') {\n                        textToken = tokens[++i];\n                        body += '\\n' + this.renderer.text(textToken);\n                    }\n                    if (top) {\n                        out += this.renderer.paragraph({\n                            type: 'paragraph',\n                            raw: body,\n                            text: body,\n                            tokens: [{ type: 'text', raw: body, text: body, escaped: true }],\n                        });\n                    }\n                    else {\n                        out += body;\n                    }\n                    continue;\n                }\n                default: {\n                    const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n                    if (this.options.silent) {\n                        console.error(errMsg);\n                        return '';\n                    }\n                    else {\n                        throw new Error(errMsg);\n                    }\n                }\n            }\n        }\n        return out;\n    }\n    /**\n     * Parse Inline Tokens\n     */\n    parseInline(tokens, renderer = this.renderer) {\n        let out = '';\n        for (let i = 0; i < tokens.length; i++) {\n            const anyToken = tokens[i];\n            // Run any renderer extensions\n            if (this.options.extensions?.renderers?.[anyToken.type]) {\n                const ret = this.options.extensions.renderers[anyToken.type].call({ parser: this }, anyToken);\n                if (ret !== false || !['escape', 'html', 'link', 'image', 'strong', 'em', 'codespan', 'br', 'del', 'text'].includes(anyToken.type)) {\n                    out += ret || '';\n                    continue;\n                }\n            }\n            const token = anyToken;\n            switch (token.type) {\n                case 'escape': {\n                    out += renderer.text(token);\n                    break;\n                }\n                case 'html': {\n                    out += renderer.html(token);\n                    break;\n                }\n                case 'link': {\n                    out += renderer.link(token);\n                    break;\n                }\n                case 'image': {\n                    out += renderer.image(token);\n                    break;\n                }\n                case 'strong': {\n                    out += renderer.strong(token);\n                    break;\n                }\n                case 'em': {\n                    out += renderer.em(token);\n                    break;\n                }\n                case 'codespan': {\n                    out += renderer.codespan(token);\n                    break;\n                }\n                case 'br': {\n                    out += renderer.br(token);\n                    break;\n                }\n                case 'del': {\n                    out += renderer.del(token);\n                    break;\n                }\n                case 'text': {\n                    out += renderer.text(token);\n                    break;\n                }\n                default: {\n                    const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n                    if (this.options.silent) {\n                        console.error(errMsg);\n                        return '';\n                    }\n                    else {\n                        throw new Error(errMsg);\n                    }\n                }\n            }\n        }\n        return out;\n    }\n}\n\nclass _Hooks {\n    options;\n    block;\n    constructor(options) {\n        this.options = options || _defaults;\n    }\n    static passThroughHooks = new Set([\n        'preprocess',\n        'postprocess',\n        'processAllTokens',\n    ]);\n    /**\n     * Process markdown before marked\n     */\n    preprocess(markdown) {\n        return markdown;\n    }\n    /**\n     * Process HTML after marked is finished\n     */\n    postprocess(html) {\n        return html;\n    }\n    /**\n     * Process all tokens before walk tokens\n     */\n    processAllTokens(tokens) {\n        return tokens;\n    }\n    /**\n     * Provide function to tokenize markdown\n     */\n    provideLexer() {\n        return this.block ? _Lexer.lex : _Lexer.lexInline;\n    }\n    /**\n     * Provide function to parse tokens\n     */\n    provideParser() {\n        return this.block ? _Parser.parse : _Parser.parseInline;\n    }\n}\n\nclass Marked {\n    defaults = _getDefaults();\n    options = this.setOptions;\n    parse = this.parseMarkdown(true);\n    parseInline = this.parseMarkdown(false);\n    Parser = _Parser;\n    Renderer = _Renderer;\n    TextRenderer = _TextRenderer;\n    Lexer = _Lexer;\n    Tokenizer = _Tokenizer;\n    Hooks = _Hooks;\n    constructor(...args) {\n        this.use(...args);\n    }\n    /**\n     * Run callback for every token\n     */\n    walkTokens(tokens, callback) {\n        let values = [];\n        for (const token of tokens) {\n            values = values.concat(callback.call(this, token));\n            switch (token.type) {\n                case 'table': {\n                    const tableToken = token;\n                    for (const cell of tableToken.header) {\n                        values = values.concat(this.walkTokens(cell.tokens, callback));\n                    }\n                    for (const row of tableToken.rows) {\n                        for (const cell of row) {\n                            values = values.concat(this.walkTokens(cell.tokens, callback));\n                        }\n                    }\n                    break;\n                }\n                case 'list': {\n                    const listToken = token;\n                    values = values.concat(this.walkTokens(listToken.items, callback));\n                    break;\n                }\n                default: {\n                    const genericToken = token;\n                    if (this.defaults.extensions?.childTokens?.[genericToken.type]) {\n                        this.defaults.extensions.childTokens[genericToken.type].forEach((childTokens) => {\n                            const tokens = genericToken[childTokens].flat(Infinity);\n                            values = values.concat(this.walkTokens(tokens, callback));\n                        });\n                    }\n                    else if (genericToken.tokens) {\n                        values = values.concat(this.walkTokens(genericToken.tokens, callback));\n                    }\n                }\n            }\n        }\n        return values;\n    }\n    use(...args) {\n        const extensions = this.defaults.extensions || { renderers: {}, childTokens: {} };\n        args.forEach((pack) => {\n            // copy options to new object\n            const opts = { ...pack };\n            // set async to true if it was set to true before\n            opts.async = this.defaults.async || opts.async || false;\n            // ==-- Parse \"addon\" extensions --== //\n            if (pack.extensions) {\n                pack.extensions.forEach((ext) => {\n                    if (!ext.name) {\n                        throw new Error('extension name required');\n                    }\n                    if ('renderer' in ext) { // Renderer extensions\n                        const prevRenderer = extensions.renderers[ext.name];\n                        if (prevRenderer) {\n                            // Replace extension with func to run new extension but fall back if false\n                            extensions.renderers[ext.name] = function (...args) {\n                                let ret = ext.renderer.apply(this, args);\n                                if (ret === false) {\n                                    ret = prevRenderer.apply(this, args);\n                                }\n                                return ret;\n                            };\n                        }\n                        else {\n                            extensions.renderers[ext.name] = ext.renderer;\n                        }\n                    }\n                    if ('tokenizer' in ext) { // Tokenizer Extensions\n                        if (!ext.level || (ext.level !== 'block' && ext.level !== 'inline')) {\n                            throw new Error(\"extension level must be 'block' or 'inline'\");\n                        }\n                        const extLevel = extensions[ext.level];\n                        if (extLevel) {\n                            extLevel.unshift(ext.tokenizer);\n                        }\n                        else {\n                            extensions[ext.level] = [ext.tokenizer];\n                        }\n                        if (ext.start) { // Function to check for start of token\n                            if (ext.level === 'block') {\n                                if (extensions.startBlock) {\n                                    extensions.startBlock.push(ext.start);\n                                }\n                                else {\n                                    extensions.startBlock = [ext.start];\n                                }\n                            }\n                            else if (ext.level === 'inline') {\n                                if (extensions.startInline) {\n                                    extensions.startInline.push(ext.start);\n                                }\n                                else {\n                                    extensions.startInline = [ext.start];\n                                }\n                            }\n                        }\n                    }\n                    if ('childTokens' in ext && ext.childTokens) { // Child tokens to be visited by walkTokens\n                        extensions.childTokens[ext.name] = ext.childTokens;\n                    }\n                });\n                opts.extensions = extensions;\n            }\n            // ==-- Parse \"overwrite\" extensions --== //\n            if (pack.renderer) {\n                const renderer = this.defaults.renderer || new _Renderer(this.defaults);\n                for (const prop in pack.renderer) {\n                    if (!(prop in renderer)) {\n                        throw new Error(`renderer '${prop}' does not exist`);\n                    }\n                    if (['options', 'parser'].includes(prop)) {\n                        // ignore options property\n                        continue;\n                    }\n                    const rendererProp = prop;\n                    const rendererFunc = pack.renderer[rendererProp];\n                    const prevRenderer = renderer[rendererProp];\n                    // Replace renderer with func to run extension, but fall back if false\n                    renderer[rendererProp] = (...args) => {\n                        let ret = rendererFunc.apply(renderer, args);\n                        if (ret === false) {\n                            ret = prevRenderer.apply(renderer, args);\n                        }\n                        return ret || '';\n                    };\n                }\n                opts.renderer = renderer;\n            }\n            if (pack.tokenizer) {\n                const tokenizer = this.defaults.tokenizer || new _Tokenizer(this.defaults);\n                for (const prop in pack.tokenizer) {\n                    if (!(prop in tokenizer)) {\n                        throw new Error(`tokenizer '${prop}' does not exist`);\n                    }\n                    if (['options', 'rules', 'lexer'].includes(prop)) {\n                        // ignore options, rules, and lexer properties\n                        continue;\n                    }\n                    const tokenizerProp = prop;\n                    const tokenizerFunc = pack.tokenizer[tokenizerProp];\n                    const prevTokenizer = tokenizer[tokenizerProp];\n                    // Replace tokenizer with func to run extension, but fall back if false\n                    // @ts-expect-error cannot type tokenizer function dynamically\n                    tokenizer[tokenizerProp] = (...args) => {\n                        let ret = tokenizerFunc.apply(tokenizer, args);\n                        if (ret === false) {\n                            ret = prevTokenizer.apply(tokenizer, args);\n                        }\n                        return ret;\n                    };\n                }\n                opts.tokenizer = tokenizer;\n            }\n            // ==-- Parse Hooks extensions --== //\n            if (pack.hooks) {\n                const hooks = this.defaults.hooks || new _Hooks();\n                for (const prop in pack.hooks) {\n                    if (!(prop in hooks)) {\n                        throw new Error(`hook '${prop}' does not exist`);\n                    }\n                    if (['options', 'block'].includes(prop)) {\n                        // ignore options and block properties\n                        continue;\n                    }\n                    const hooksProp = prop;\n                    const hooksFunc = pack.hooks[hooksProp];\n                    const prevHook = hooks[hooksProp];\n                    if (_Hooks.passThroughHooks.has(prop)) {\n                        // @ts-expect-error cannot type hook function dynamically\n                        hooks[hooksProp] = (arg) => {\n                            if (this.defaults.async) {\n                                return Promise.resolve(hooksFunc.call(hooks, arg)).then(ret => {\n                                    return prevHook.call(hooks, ret);\n                                });\n                            }\n                            const ret = hooksFunc.call(hooks, arg);\n                            return prevHook.call(hooks, ret);\n                        };\n                    }\n                    else {\n                        // @ts-expect-error cannot type hook function dynamically\n                        hooks[hooksProp] = (...args) => {\n                            let ret = hooksFunc.apply(hooks, args);\n                            if (ret === false) {\n                                ret = prevHook.apply(hooks, args);\n                            }\n                            return ret;\n                        };\n                    }\n                }\n                opts.hooks = hooks;\n            }\n            // ==-- Parse WalkTokens extensions --== //\n            if (pack.walkTokens) {\n                const walkTokens = this.defaults.walkTokens;\n                const packWalktokens = pack.walkTokens;\n                opts.walkTokens = function (token) {\n                    let values = [];\n                    values.push(packWalktokens.call(this, token));\n                    if (walkTokens) {\n                        values = values.concat(walkTokens.call(this, token));\n                    }\n                    return values;\n                };\n            }\n            this.defaults = { ...this.defaults, ...opts };\n        });\n        return this;\n    }\n    setOptions(opt) {\n        this.defaults = { ...this.defaults, ...opt };\n        return this;\n    }\n    lexer(src, options) {\n        return _Lexer.lex(src, options ?? this.defaults);\n    }\n    parser(tokens, options) {\n        return _Parser.parse(tokens, options ?? this.defaults);\n    }\n    parseMarkdown(blockType) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const parse = (src, options) => {\n            const origOpt = { ...options };\n            const opt = { ...this.defaults, ...origOpt };\n            const throwError = this.onError(!!opt.silent, !!opt.async);\n            // throw error if an extension set async to true but parse was called with async: false\n            if (this.defaults.async === true && origOpt.async === false) {\n                return throwError(new Error('marked(): The async option was set to true by an extension. Remove async: false from the parse options object to return a Promise.'));\n            }\n            // throw error in case of non string input\n            if (typeof src === 'undefined' || src === null) {\n                return throwError(new Error('marked(): input parameter is undefined or null'));\n            }\n            if (typeof src !== 'string') {\n                return throwError(new Error('marked(): input parameter is of type '\n                    + Object.prototype.toString.call(src) + ', string expected'));\n            }\n            if (opt.hooks) {\n                opt.hooks.options = opt;\n                opt.hooks.block = blockType;\n            }\n            const lexer = opt.hooks ? opt.hooks.provideLexer() : (blockType ? _Lexer.lex : _Lexer.lexInline);\n            const parser = opt.hooks ? opt.hooks.provideParser() : (blockType ? _Parser.parse : _Parser.parseInline);\n            if (opt.async) {\n                return Promise.resolve(opt.hooks ? opt.hooks.preprocess(src) : src)\n                    .then(src => lexer(src, opt))\n                    .then(tokens => opt.hooks ? opt.hooks.processAllTokens(tokens) : tokens)\n                    .then(tokens => opt.walkTokens ? Promise.all(this.walkTokens(tokens, opt.walkTokens)).then(() => tokens) : tokens)\n                    .then(tokens => parser(tokens, opt))\n                    .then(html => opt.hooks ? opt.hooks.postprocess(html) : html)\n                    .catch(throwError);\n            }\n            try {\n                if (opt.hooks) {\n                    src = opt.hooks.preprocess(src);\n                }\n                let tokens = lexer(src, opt);\n                if (opt.hooks) {\n                    tokens = opt.hooks.processAllTokens(tokens);\n                }\n                if (opt.walkTokens) {\n                    this.walkTokens(tokens, opt.walkTokens);\n                }\n                let html = parser(tokens, opt);\n                if (opt.hooks) {\n                    html = opt.hooks.postprocess(html);\n                }\n                return html;\n            }\n            catch (e) {\n                return throwError(e);\n            }\n        };\n        return parse;\n    }\n    onError(silent, async) {\n        return (e) => {\n            e.message += '\\nPlease report this to https://github.com/markedjs/marked.';\n            if (silent) {\n                const msg = '<p>An error occurred:</p><pre>'\n                    + escape(e.message + '', true)\n                    + '</pre>';\n                if (async) {\n                    return Promise.resolve(msg);\n                }\n                return msg;\n            }\n            if (async) {\n                return Promise.reject(e);\n            }\n            throw e;\n        };\n    }\n}\n\nconst markedInstance = new Marked();\nfunction marked(src, opt) {\n    return markedInstance.parse(src, opt);\n}\n/**\n * Sets the default options.\n *\n * @param options Hash of options\n */\nmarked.options =\n    marked.setOptions = function (options) {\n        markedInstance.setOptions(options);\n        marked.defaults = markedInstance.defaults;\n        changeDefaults(marked.defaults);\n        return marked;\n    };\n/**\n * Gets the original marked default options.\n */\nmarked.getDefaults = _getDefaults;\nmarked.defaults = _defaults;\n/**\n * Use Extension\n */\nmarked.use = function (...args) {\n    markedInstance.use(...args);\n    marked.defaults = markedInstance.defaults;\n    changeDefaults(marked.defaults);\n    return marked;\n};\n/**\n * Run callback for every token\n */\nmarked.walkTokens = function (tokens, callback) {\n    return markedInstance.walkTokens(tokens, callback);\n};\n/**\n * Compiles markdown to HTML without enclosing `p` tag.\n *\n * @param src String of markdown source to be compiled\n * @param options Hash of options\n * @return String of compiled HTML\n */\nmarked.parseInline = markedInstance.parseInline;\n/**\n * Expose\n */\nmarked.Parser = _Parser;\nmarked.parser = _Parser.parse;\nmarked.Renderer = _Renderer;\nmarked.TextRenderer = _TextRenderer;\nmarked.Lexer = _Lexer;\nmarked.lexer = _Lexer.lex;\nmarked.Tokenizer = _Tokenizer;\nmarked.Hooks = _Hooks;\nmarked.parse = marked;\nconst options = marked.options;\nconst setOptions = marked.setOptions;\nconst use = marked.use;\nconst walkTokens = marked.walkTokens;\nconst parseInline = marked.parseInline;\nconst parse = marked;\nconst parser = _Parser.parse;\nconst lexer = _Lexer.lex;\n\nexport { _Hooks as Hooks, _Lexer as Lexer, Marked, _Parser as Parser, _Renderer as Renderer, _TextRenderer as TextRenderer, _Tokenizer as Tokenizer, _defaults as defaults, _getDefaults as getDefaults, lexer, marked, options, parse, parseInline, parser, setOptions, use, walkTokens };\n//# sourceMappingURL=marked.esm.js.map\n","import _createForOfIteratorHelper from \"C:/projects/lincms/lin-cms-vvlog/node_modules/.pnpm/@babel+runtime@7.20.13/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _regeneratorRuntime from \"C:/projects/lincms/lin-cms-vvlog/node_modules/.pnpm/@babel+runtime@7.20.13/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/projects/lincms/lin-cms-vvlog/node_modules/.pnpm/@babel+runtime@7.20.13/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"core-js/modules/es.string.trim.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.string.starts-with.js\";\nimport \"core-js/modules/es.array.find.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.string.pad-start.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport Config from '@/config';\nimport { getToken } from '@/lin/util/token';\nimport axios from 'axios';\nimport { marked } from 'marked';\nimport OrderPayDialog from '@/view/order/order-pay-dialog';\nimport { ElMessage } from 'element-plus';\nexport default {\n  components: {\n    OrderPayDialog: OrderPayDialog\n  },\n  data: function data() {\n    return {\n      messages: [{\n        role: 'system',\n        content: '你好，我是邻智AI测算助手，提供八字合婚,流年运势,宝宝/公司起名,姓名配对,八字精批,塔罗牌占卜等在线测算，我会根据您提供的信息进行详细的计算和分析，有什么需要我的帮助吗？'\n      }],\n      inputMessage: '',\n      wdMessages: {},\n      isLoading: false,\n      // 添加一个标志变量\n      typeWriterTimer: null,\n      publishDialogVisible: false,\n      dialogTitle: '',\n      ai_chat_count: this.$store.state.user.ai_chat_count ? this.$store.state.user.ai_chat_count : null\n    };\n  },\n  methods: {\n    sendMessage: function sendMessage() {\n      var _this = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var str;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              if (!(_this.inputMessage.trim() === '')) {\n                _context.next = 2;\n                break;\n              }\n              return _context.abrupt(\"return\");\n            case 2:\n              str = _this.inputMessage;\n              _this.inputMessage = '';\n              _this.messages.push({\n                role: 'user',\n                content: str\n              });\n              _this.scrollToBottom();\n\n              // 设置加载状态\n              _this.isLoading = true;\n              _context.next = 9;\n              return _this.getAiResponse();\n            case 9:\n              // 取消加载状态\n              _this.isLoading = false;\n              _this.scrollToBottom();\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }))();\n    },\n    showPay: function showPay() {\n      var _this2 = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _this2.$router.push('/server');\n            case 1:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2);\n      }))();\n    },\n    getAiResponse: function getAiResponse() {\n      var _this3 = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var accessToken, response, lines, fullResponse, _iterator, _step, line, trimmedLine, data, newContent;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.prev = 0;\n              accessToken = getToken('access_token');\n              _context3.next = 4;\n              return axios.post(Config.baseURL + \"api/blog/articles/chatstream\", _this3.messages, {\n                headers: {\n                  'Content-Type': 'application/json; charset=utf-8',\n                  'Authorization': accessToken\n                },\n                responseType: 'text'\n              });\n            case 4:\n              response = _context3.sent;\n              lines = response.data.split('\\n');\n              fullResponse = '';\n              _this3.messages.push({\n                role: 'system',\n                content: ''\n              });\n              _iterator = _createForOfIteratorHelper(lines);\n              _context3.prev = 9;\n              _iterator.s();\n            case 11:\n              if ((_step = _iterator.n()).done) {\n                _context3.next = 19;\n                break;\n              }\n              line = _step.value;\n              if (!(line.trim() === '' || line === 'data: [DONE]')) {\n                _context3.next = 15;\n                break;\n              }\n              return _context3.abrupt(\"continue\", 17);\n            case 15:\n              trimmedLine = line.startsWith('data: ') ? line.substring(6) : line;\n              try {\n                data = JSON.parse(trimmedLine);\n                if (data.choices && data.choices[0] && data.choices[0].delta && data.choices[0].delta.content) {\n                  newContent = data.choices[0].delta.content;\n                  fullResponse += newContent;\n                }\n              } catch (error) {\n                console.error('Error parsing line:', line, error);\n              }\n            case 17:\n              _context3.next = 11;\n              break;\n            case 19:\n              _context3.next = 24;\n              break;\n            case 21:\n              _context3.prev = 21;\n              _context3.t0 = _context3[\"catch\"](9);\n              _iterator.e(_context3.t0);\n            case 24:\n              _context3.prev = 24;\n              _iterator.f();\n              return _context3.finish(24);\n            case 27:\n              _this3.typeWriterEffect(fullResponse);\n              _context3.next = 34;\n              break;\n            case 30:\n              _context3.prev = 30;\n              _context3.t1 = _context3[\"catch\"](0);\n              _this3.messages.push({\n                role: 'system',\n                content: '系统繁忙，请输入继续！'\n              });\n              _this3.inputMessage = '继续';\n            case 34:\n              _context3.prev = 34;\n              // 确保在请求完成或失败后取消加载状态\n              _this3.isLoading = false;\n              return _context3.finish(34);\n            case 37:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, null, [[0, 30, 34, 37], [9, 21, 24, 27]]);\n      }))();\n    },\n    SendwdMessages: function SendwdMessages() {\n      var _this4 = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        var accessToken, response, msg;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.prev = 0;\n              _this4.wdMessages.title = _this4.dialogTitle;\n              _this4.wdMessages.messages = _this4.messages;\n              accessToken = getToken('access_token');\n              _context4.next = 6;\n              return axios.post(Config.baseURL + \"api/blog/articles/wdarticle\", _this4.wdMessages, {\n                headers: {\n                  'Content-Type': 'application/json; charset=utf-8',\n                  'Authorization': accessToken\n                },\n                responseType: 'text'\n              });\n            case 6:\n              response = _context4.sent;\n              //返回true和false 展示发布成功和失败\n              if (response.data === true) {\n                ElMessage.success('发布成功');\n              } else {\n                msg = '此功能是主播专属功能，请开通主播卡！<a href=\"/#/server\" style=\"color: #409EFF; text-decoration: underline;\">点此订阅</a>';\n                ElMessage.warning({\n                  message: msg,\n                  dangerouslyUseHTMLString: true,\n                  duration: 6000\n                });\n              }\n              _this4.publishDialogVisible = false;\n              _context4.next = 15;\n              break;\n            case 11:\n              _context4.prev = 11;\n              _context4.t0 = _context4[\"catch\"](0);\n              _this4.messages.push({\n                role: 'system',\n                content: '系统异常，请联系管理员！'\n              });\n              ElMessage.error('发布失败,系统异常');\n            case 15:\n              _context4.prev = 15;\n              // 确保在请求完成或失败后取消加载状态\n              _this4.isLoading = false;\n              _this4.publishDialogVisible = false;\n              return _context4.finish(15);\n            case 19:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, null, [[0, 11, 15, 19]]);\n      }))();\n    },\n    typeWriterEffect: function typeWriterEffect(content) {\n      var _this5 = this;\n      var index = 0;\n      // 找到最后一个 role 为 'system' 的消息\n      var lastSystemMessage = this.messages.slice().reverse().find(function (message) {\n        return message.role === 'system';\n      });\n\n      // 如果没有找到 system 消息，直接返回\n      if (!lastSystemMessage) return;\n\n      // 清除之前的定时器\n      if (this.typeWriterTimer) {\n        clearInterval(this.typeWriterTimer);\n      }\n\n      // 每50ms更新一次内容，逐字符显示\n      this.typeWriterTimer = setInterval(function () {\n        if (index < content.length) {\n          lastSystemMessage.content += content[index];\n          index++;\n          _this5.scrollToBottom();\n        } else {\n          clearInterval(_this5.typeWriterTimer); // 完成后停止定时器\n          _this5.scrollToBottom();\n        }\n      }, 20);\n      this.scrollToBottom();\n    },\n    parseMarkdown: function parseMarkdown(content) {\n      return marked.parse(content);\n    },\n    scrollToBottom: function scrollToBottom() {\n      var _this6 = this;\n      setTimeout(function () {\n        var chatBody = _this6.$refs.chatBody;\n        chatBody.scrollTop = chatBody.scrollHeight;\n      }, 100);\n    },\n    showPublishDialog: function showPublishDialog() {\n      this.dialogTitle = '';\n      this.publishDialogVisible = true;\n    },\n    publishChat: function publishChat() {\n      if (!this.dialogTitle.trim()) {\n        ElMessage.warning('请输入标题');\n        return;\n      }\n      var now = new Date();\n      var dateStr = \"\".concat(now.getFullYear(), \"-\").concat(String(now.getMonth() + 1).padStart(2, '0'), \"-\").concat(String(now.getDate()).padStart(2, '0'));\n      this.dialogTitle = this.dialogTitle + ' ' + dateStr;\n      this.SendwdMessages();\n    }\n  },\n  mounted: function mounted() {\n    var _this7 = this;\n    // 在组件加载时检查 URL 参数\n    var userInput = this.$route.query.user_input;\n    var dataId = this.$route.query.data_id;\n    if (dataId) {\n      // 如果存在 data_id 参数，从localStorage获取数据\n      import('@/lin/util/data-transfer').then(function (_ref) {\n        var getData = _ref.getData,\n          removeData = _ref.removeData;\n        var data = getData(dataId);\n        if (data) {\n          // 构建消息内容\n          var content = data;\n\n          // 将构建的内容添加到消息列表\n          _this7.messages.push({\n            role: 'user',\n            content: content\n          });\n          _this7.isLoading = true;\n          _this7.getAiResponse();\n          _this7.scrollToBottom();\n\n          // 使用完数据后从localStorage中删除\n          removeData(dataId);\n        } else {\n          ElMessage.warning('数据已过期或不存在');\n        }\n      }).catch(function (error) {\n        console.error('读取数据失败:', error);\n        ElMessage.error('读取数据失败');\n      });\n    } else if (userInput) {\n      // 如果存在 user_input 参数，将其作为用户输入消息\n      this.messages.push({\n        role: 'user',\n        content: userInput\n      });\n      this.isLoading = true;\n      this.getAiResponse();\n      this.scrollToBottom();\n    }\n  },\n  computed: {\n    loggedIn: function loggedIn() {\n      return this.$store.state.loggedIn;\n    }\n  }\n};","/* unplugin-vue-components disabled */import { render } from \"./aichat-dialog.vue?vue&type=template&id=9eb633d4&scoped=true\"\nimport script from \"./aichat-dialog.vue?vue&type=script&lang=js\"\nexport * from \"./aichat-dialog.vue?vue&type=script&lang=js\"\n\nimport \"./aichat-dialog.vue?vue&type=style&index=0&id=9eb633d4&scoped=true&lang=css\"\n\nimport exportComponent from \"C:\\\\projects\\\\lincms\\\\lin-cms-vvlog\\\\node_modules\\\\.pnpm\\\\vue-loader@17.0.1_@vue+comp_e39f86f78aac963d8097e82d11dff38c\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-9eb633d4\"]])\n\nexport default __exports__","import unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nexport default function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (!it) {\n    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n      var F = function F() {};\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n  var normalCompletion = true,\n    didErr = false,\n    err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}"],"names":["_withScopeId","n","_hoisted_1","class","_hoisted_2","_","_hoisted_3","ref","_hoisted_4","_hoisted_5","_hoisted_6","_hoisted_7","_hoisted_8","key","_hoisted_9","_hoisted_10","_hoisted_11","_hoisted_12","_hoisted_13","_hoisted_14","_hoisted_15","_hoisted_16","_hoisted_17","render","_ctx","_cache","$props","$setup","$data","$options","_component_el_input","_component_el_button","_component_el_dialog","messages","message","index","role","innerHTML","parseMarkdown","content","isLoading","$event","inputMessage","placeholder","onKeyup","sendMessage","apply","arguments","onClick","disabled","trim","loggedIn","ai_chat_count","showPublishDialog","title","modelValue","publishDialogVisible","width","footer","default","type","publishChat","dialogTitle","_getDefaults","async","breaks","extensions","gfm","hooks","pedantic","renderer","silent","tokenizer","walkTokens","_defaults","changeDefaults","newDefaults","noopTest","exec","edit","regex","opt","source","obj","replace","name","val","valSource","other","caret","getRegex","RegExp","codeRemoveIndent","outputLinkReplace","indentCodeCompensation","beginningSpace","endingHash","startingSpaceChar","endingSpaceChar","nonSpaceChar","newLineCharGlobal","tabCharGlobal","multipleSpaceGlobal","blankLine","doubleBlankLine","blockquoteStart","blockquoteSetextReplace","blockquoteSetextReplace2","listReplaceTabs","listReplaceNesting","listIsTask","listReplaceTask","anyLine","hrefBrackets","tableDelimiter","tableAlignChars","tableRowBlankLine","tableAlignRight","tableAlignCenter","tableAlignLeft","startATag","endATag","startPreScriptTag","endPreScriptTag","startAngleBracket","endAngleBracket","pedanticHrefTitle","unicodeAlphaNumeric","escapeTest","escapeReplace","escapeTestNoEncode","escapeReplaceNoEncode","unescapeTest","percentDecode","findPipe","splitPipe","slashPipe","carriageReturn","spaceLine","notSpaceStart","endingNewline","listItemRegex","bull","nextBulletRegex","indent","Math","min","hrRegex","fencesBeginRegex","headingBeginRegex","htmlBeginRegex","newline","blockCode","fences","hr","heading","bullet","lheading","_paragraph","blockText","_blockLabel","def","list","_tag","_comment","html","paragraph","blockquote","blockNormal","code","table","text","gfmTable","blockGfm","blockPedantic","escape$1","inlineCode","br","inlineText","_punctuation","_punctuationOrSpace","_notPunctuationOrSpace","punctuation","blockSkip","emStrongLDelim","emStrongRDelimAst","emStrongRDelimUnd","anyPunctuation","autolink","_inlineComment","tag","_inlineLabel","reflink","nolink","reflinkSearch","inlineNormal","_backpedal","del","escape","link","url","inlinePedantic","inlineGfm","inlineBreaks","block","normal","inline","escapeReplacements","getEscapeReplacement","ch","encode","test","cleanUrl","href","encodeURI","splitCells","tableRow","count","row","match","offset","str","escaped","curr","cells","split","i","shift","length","at","pop","splice","push","rtrim","c","invert","l","suffLen","currChar","charAt","slice","findClosingBracket","b","indexOf","level","outputLink","cap","raw","lexer","rules","state","inLink","token","tokens","inlineTokens","matchIndentToCode","indentToCode","map","node","matchIndentInNode","indentInNode","join","_Tokenizer","options","constructor","this","space","src","codeBlockStyle","lang","trimmed","depth","lines","inBlockquote","currentLines","currentRaw","currentText","top","blockTokens","lastToken","oldToken","newText","newToken","substring","isordered","ordered","start","loose","items","itemRegex","endsWithBlankLine","endEarly","itemContents","line","t","repeat","nextLine","trimStart","search","rawLine","nextLineWithoutTabs","ischecked","istask","task","checked","lastItem","trimEnd","spacers","filter","hasMultipleLineBreaks","some","pre","toLowerCase","headers","aligns","rows","item","header","align","cell","inRawBlock","trimmedUrl","rtrimSlash","lastParenIndex","linkLen","links","linkString","emStrong","maskedSrc","prevChar","nextChar","lLength","rDelim","rLength","delimTotal","midDelimTotal","endReg","lastIndex","lastCharLength","codespan","hasNonSpaceChars","hasSpaceCharsOnBothEnds","prevCapZero","_Lexer","inlineQueue","Object","create","static","lex","next","lastParagraphClipped","extTokenizer","call","undefined","cutSrc","startBlock","startIndex","Infinity","tempSrc","tempStart","forEach","getStartIndex","errMsg","charCodeAt","console","error","Error","keys","includes","lastIndexOf","keepPrevChar","startInline","_Renderer","parser","langString","body","parse","parseInline","j","listitem","startAttr","itemBody","checkbox","unshift","tablecell","tablerow","k","strong","em","cleanHref","out","image","_TextRenderer","_Parser","textRenderer","anyToken","renderers","genericToken","ret","textToken","_Hooks","Set","preprocess","markdown","postprocess","processAllTokens","provideLexer","lexInline","provideParser","Marked","defaults","setOptions","Parser","Renderer","TextRenderer","Lexer","Tokenizer","Hooks","args","use","callback","values","concat","tableToken","listToken","childTokens","flat","pack","opts","ext","prevRenderer","extLevel","prop","rendererProp","rendererFunc","tokenizerProp","tokenizerFunc","prevTokenizer","hooksProp","hooksFunc","prevHook","passThroughHooks","has","arg","Promise","resolve","then","packWalktokens","blockType","origOpt","throwError","onError","prototype","toString","all","catch","e","msg","reject","markedInstance","marked","getDefaults","components","OrderPayDialog","data","wdMessages","typeWriterTimer","$store","user","methods","_this","mark","_callee","wrap","_context","prev","abrupt","scrollToBottom","getAiResponse","stop","showPay","_this2","_callee2","_context2","$router","_this3","_callee3","accessToken","response","fullResponse","_iterator","_step","trimmedLine","newContent","_context3","responseType","sent","s","done","value","startsWith","JSON","choices","delta","t0","f","finish","typeWriterEffect","t1","SendwdMessages","_this4","_callee4","_context4","dangerouslyUseHTMLString","duration","_this5","lastSystemMessage","reverse","find","clearInterval","setInterval","_this6","setTimeout","chatBody","$refs","scrollTop","scrollHeight","now","Date","dateStr","getFullYear","String","getMonth","padStart","getDate","mounted","_this7","userInput","$route","query","user_input","dataId","data_id","_ref","getData","removeData","computed","__exports__","_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","Array","isArray","unsupportedIterableToArray","F","_e","TypeError","err","normalCompletion","didErr","step","_e2"],"sourceRoot":""}